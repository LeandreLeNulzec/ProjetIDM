/*
 * generated by Xtext 2.32.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.algorithme_xtext.Algorithme;
import fr.n7.algorithme_xtext.Algorithme_xtextPackage;
import fr.n7.algorithme_xtext.Documentation;
import fr.n7.algorithme_xtext.Entree;
import fr.n7.algorithme_xtext.Ressources;
import fr.n7.algorithme_xtext.Sortie;
import fr.n7.services.Algorithme_xtextGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Algorithme_xtextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Algorithme_xtextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Algorithme_xtextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Algorithme_xtextPackage.ALGORITHME:
				sequence_Algorithme(context, (Algorithme) semanticObject); 
				return; 
			case Algorithme_xtextPackage.DOCUMENTATION:
				sequence_Documentation(context, (Documentation) semanticObject); 
				return; 
			case Algorithme_xtextPackage.ENTREE:
				sequence_Entree(context, (Entree) semanticObject); 
				return; 
			case Algorithme_xtextPackage.RESSOURCES:
				sequence_Ressources(context, (Ressources) semanticObject); 
				return; 
			case Algorithme_xtextPackage.SORTIE:
				sequence_Sortie(context, (Sortie) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Algorithme returns Algorithme
	 *
	 * Constraint:
	 *     (nom=ID algorithmeElements+=AlgorithmeElements*)
	 * </pre>
	 */
	protected void sequence_Algorithme(ISerializationContext context, Algorithme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AlgorithmeElements returns Documentation
	 *     Documentation returns Documentation
	 *
	 * Constraint:
	 *     texte=STRING
	 * </pre>
	 */
	protected void sequence_Documentation(ISerializationContext context, Documentation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Algorithme_xtextPackage.Literals.DOCUMENTATION__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Algorithme_xtextPackage.Literals.DOCUMENTATION__TEXTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDocumentationAccess().getTexteSTRINGTerminalRuleCall_1_0(), semanticObject.getTexte());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entree returns Entree
	 *
	 * Constraint:
	 *     (nom=ID valeur=ID)
	 * </pre>
	 */
	protected void sequence_Entree(ISerializationContext context, Entree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Algorithme_xtextPackage.Literals.ENTREE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Algorithme_xtextPackage.Literals.ENTREE__NOM));
			if (transientValues.isValueTransient(semanticObject, Algorithme_xtextPackage.Literals.ENTREE__VALEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Algorithme_xtextPackage.Literals.ENTREE__VALEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntreeAccess().getNomIDTerminalRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getEntreeAccess().getValeurIDTerminalRuleCall_3_0(), semanticObject.getValeur());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AlgorithmeElements returns Ressources
	 *     Ressources returns Ressources
	 *
	 * Constraint:
	 *     (chemin=Chemin | script=ID)
	 * </pre>
	 */
	protected void sequence_Ressources(ISerializationContext context, Ressources semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sortie returns Sortie
	 *
	 * Constraint:
	 *     (nom=ID valeur=ID)
	 * </pre>
	 */
	protected void sequence_Sortie(ISerializationContext context, Sortie semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Algorithme_xtextPackage.Literals.SORTIE__NOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Algorithme_xtextPackage.Literals.SORTIE__NOM));
			if (transientValues.isValueTransient(semanticObject, Algorithme_xtextPackage.Literals.SORTIE__VALEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Algorithme_xtextPackage.Literals.SORTIE__VALEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSortieAccess().getNomIDTerminalRuleCall_1_0(), semanticObject.getNom());
		feeder.accept(grammarAccess.getSortieAccess().getValeurIDTerminalRuleCall_3_0(), semanticObject.getValeur());
		feeder.finish();
	}
	
	
}
