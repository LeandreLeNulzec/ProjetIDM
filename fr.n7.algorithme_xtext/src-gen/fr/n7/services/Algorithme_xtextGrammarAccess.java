/*
 * generated by Xtext 2.32.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Algorithme_xtextGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AlgorithmeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.Algorithme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlgorithmeElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlgorithmeElementsAlgorithmeElementsParserRuleCall_3_0 = (RuleCall)cAlgorithmeElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Algorithme : 'algorithme' nom = ID '{'
		//    algorithmeElements += AlgorithmeElements*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'algorithme' nom = ID '{'
		//   algorithmeElements += AlgorithmeElements*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'algorithme'
		public Keyword getAlgorithmeKeyword_0() { return cAlgorithmeKeyword_0; }
		
		//nom = ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//algorithmeElements += AlgorithmeElements*
		public Assignment getAlgorithmeElementsAssignment_3() { return cAlgorithmeElementsAssignment_3; }
		
		//AlgorithmeElements
		public RuleCall getAlgorithmeElementsAlgorithmeElementsParserRuleCall_3_0() { return cAlgorithmeElementsAlgorithmeElementsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AlgorithmeElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.AlgorithmeElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRessourcesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDocumentationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AlgorithmeElements: Ressources | Documentation;
		@Override public ParserRule getRule() { return rule; }
		
		//Ressources | Documentation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ressources
		public RuleCall getRessourcesParserRuleCall_0() { return cRessourcesParserRuleCall_0; }
		
		//Documentation
		public RuleCall getDocumentationParserRuleCall_1() { return cDocumentationParserRuleCall_1; }
	}
	public class RessourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.Ressources");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRessourcesKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCheminAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCheminCheminParserRuleCall_0_1_0 = (RuleCall)cCheminAssignment_0_1.eContents().get(0);
		private final Assignment cScriptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cScriptIDTerminalRuleCall_1_0 = (RuleCall)cScriptAssignment_1.eContents().get(0);
		
		//Ressources : 'Ressources :' chemin=Chemin | script = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Ressources :' chemin=Chemin | script = ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Ressources :' chemin=Chemin
		public Group getGroup_0() { return cGroup_0; }
		
		//'Ressources :'
		public Keyword getRessourcesKeyword_0_0() { return cRessourcesKeyword_0_0; }
		
		//chemin=Chemin
		public Assignment getCheminAssignment_0_1() { return cCheminAssignment_0_1; }
		
		//Chemin
		public RuleCall getCheminCheminParserRuleCall_0_1_0() { return cCheminCheminParserRuleCall_0_1_0; }
		
		//script = ID
		public Assignment getScriptAssignment_1() { return cScriptAssignment_1; }
		
		//ID
		public RuleCall getScriptIDTerminalRuleCall_1_0() { return cScriptIDTerminalRuleCall_1_0; }
	}
	public class CheminElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.Chemin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Chemin : ('/'ID('.'ID)*)+ ;
		@Override public ParserRule getRule() { return rule; }
		
		//('/'ID('.'ID)*)+
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('.'ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommentaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTexteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTexteSTRINGTerminalRuleCall_1_0 = (RuleCall)cTexteAssignment_1.eContents().get(0);
		
		//Documentation : 'commentaire' texte = STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'commentaire' texte = STRING
		public Group getGroup() { return cGroup; }
		
		//'commentaire'
		public Keyword getCommentaireKeyword_0() { return cCommentaireKeyword_0; }
		
		//texte = STRING
		public Assignment getTexteAssignment_1() { return cTexteAssignment_1; }
		
		//STRING
		public RuleCall getTexteSTRINGTerminalRuleCall_1_0() { return cTexteSTRINGTerminalRuleCall_1_0; }
	}
	public class EntreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.Entree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntrEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cAssociKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValeurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValeurIDTerminalRuleCall_3_0 = (RuleCall)cValeurAssignment_3.eContents().get(0);
		
		//Entree : 'Entrée' nom=ID 'associé à' valeur = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Entrée' nom=ID 'associé à' valeur = ID
		public Group getGroup() { return cGroup; }
		
		//'Entrée'
		public Keyword getEntrEKeyword_0() { return cEntrEKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'associé à'
		public Keyword getAssociKeyword_2() { return cAssociKeyword_2; }
		
		//valeur = ID
		public Assignment getValeurAssignment_3() { return cValeurAssignment_3; }
		
		//ID
		public RuleCall getValeurIDTerminalRuleCall_3_0() { return cValeurIDTerminalRuleCall_3_0; }
	}
	public class SortieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Algorithme_xtext.Sortie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortieKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cAssociKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValeurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValeurIDTerminalRuleCall_3_0 = (RuleCall)cValeurAssignment_3.eContents().get(0);
		
		//Sortie : 'Sortie' nom=ID 'associé à' valeur = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sortie' nom=ID 'associé à' valeur = ID
		public Group getGroup() { return cGroup; }
		
		//'Sortie'
		public Keyword getSortieKeyword_0() { return cSortieKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//'associé à'
		public Keyword getAssociKeyword_2() { return cAssociKeyword_2; }
		
		//valeur = ID
		public Assignment getValeurAssignment_3() { return cValeurAssignment_3; }
		
		//ID
		public RuleCall getValeurIDTerminalRuleCall_3_0() { return cValeurIDTerminalRuleCall_3_0; }
	}
	
	
	private final AlgorithmeElements pAlgorithme;
	private final AlgorithmeElementsElements pAlgorithmeElements;
	private final RessourcesElements pRessources;
	private final CheminElements pChemin;
	private final DocumentationElements pDocumentation;
	private final EntreeElements pEntree;
	private final SortieElements pSortie;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Algorithme_xtextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAlgorithme = new AlgorithmeElements();
		this.pAlgorithmeElements = new AlgorithmeElementsElements();
		this.pRessources = new RessourcesElements();
		this.pChemin = new CheminElements();
		this.pDocumentation = new DocumentationElements();
		this.pEntree = new EntreeElements();
		this.pSortie = new SortieElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.Algorithme_xtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Algorithme : 'algorithme' nom = ID '{'
	//    algorithmeElements += AlgorithmeElements*
	//    '}';
	public AlgorithmeElements getAlgorithmeAccess() {
		return pAlgorithme;
	}
	
	public ParserRule getAlgorithmeRule() {
		return getAlgorithmeAccess().getRule();
	}
	
	//AlgorithmeElements: Ressources | Documentation;
	public AlgorithmeElementsElements getAlgorithmeElementsAccess() {
		return pAlgorithmeElements;
	}
	
	public ParserRule getAlgorithmeElementsRule() {
		return getAlgorithmeElementsAccess().getRule();
	}
	
	//Ressources : 'Ressources :' chemin=Chemin | script = ID;
	public RessourcesElements getRessourcesAccess() {
		return pRessources;
	}
	
	public ParserRule getRessourcesRule() {
		return getRessourcesAccess().getRule();
	}
	
	//Chemin : ('/'ID('.'ID)*)+ ;
	public CheminElements getCheminAccess() {
		return pChemin;
	}
	
	public ParserRule getCheminRule() {
		return getCheminAccess().getRule();
	}
	
	//Documentation : 'commentaire' texte = STRING;
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//Entree : 'Entrée' nom=ID 'associé à' valeur = ID;
	public EntreeElements getEntreeAccess() {
		return pEntree;
	}
	
	public ParserRule getEntreeRule() {
		return getEntreeAccess().getRule();
	}
	
	//Sortie : 'Sortie' nom=ID 'associé à' valeur = ID;
	public SortieElements getSortieAccess() {
		return pSortie;
	}
	
	public ParserRule getSortieRule() {
		return getSortieAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
