/*
 * generated by Xtext 2.32.0
 */
grammar InternalAlgorithme_xtext;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.n7.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.n7.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.n7.services.Algorithme_xtextGrammarAccess;

}

@parser::members {

 	private Algorithme_xtextGrammarAccess grammarAccess;

    public InternalAlgorithme_xtextParser(TokenStream input, Algorithme_xtextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Algorithme";
   	}

   	@Override
   	protected Algorithme_xtextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAlgorithme
entryRuleAlgorithme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmeRule()); }
	iv_ruleAlgorithme=ruleAlgorithme
	{ $current=$iv_ruleAlgorithme.current; }
	EOF;

// Rule Algorithme
ruleAlgorithme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='algorithme'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmeAccess().getAlgorithmeKeyword_0());
		}
		(
			(
				lv_nom_1_0=RULE_ID
				{
					newLeafNode(lv_nom_1_0, grammarAccess.getAlgorithmeAccess().getNomIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmeRule());
					}
					setWithLastConsumed(
						$current,
						"nom",
						lv_nom_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAlgorithmeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmeAccess().getAlgorithmeElementsAlgorithmeElementsParserRuleCall_3_0());
				}
				lv_algorithmeElements_3_0=ruleAlgorithmeElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmeRule());
					}
					add(
						$current,
						"algorithmeElements",
						lv_algorithmeElements_3_0,
						"fr.n7.Algorithme_xtext.AlgorithmeElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAlgorithmeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAlgorithmeElements
entryRuleAlgorithmeElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmeElementsRule()); }
	iv_ruleAlgorithmeElements=ruleAlgorithmeElements
	{ $current=$iv_ruleAlgorithmeElements.current; }
	EOF;

// Rule AlgorithmeElements
ruleAlgorithmeElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAlgorithmeElementsAccess().getRessourcesParserRuleCall_0());
		}
		this_Ressources_0=ruleRessources
		{
			$current = $this_Ressources_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlgorithmeElementsAccess().getDocumentationParserRuleCall_1());
		}
		this_Documentation_1=ruleDocumentation
		{
			$current = $this_Documentation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRessources
entryRuleRessources returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRessourcesRule()); }
	iv_ruleRessources=ruleRessources
	{ $current=$iv_ruleRessources.current; }
	EOF;

// Rule Ressources
ruleRessources returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Ressources :'
			{
				newLeafNode(otherlv_0, grammarAccess.getRessourcesAccess().getRessourcesKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRessourcesAccess().getCheminCheminParserRuleCall_0_1_0());
					}
					lv_chemin_1_0=ruleChemin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRessourcesRule());
						}
						set(
							$current,
							"chemin",
							lv_chemin_1_0,
							"fr.n7.Algorithme_xtext.Chemin");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				lv_script_2_0=RULE_ID
				{
					newLeafNode(lv_script_2_0, grammarAccess.getRessourcesAccess().getScriptIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRessourcesRule());
					}
					setWithLastConsumed(
						$current,
						"script",
						lv_script_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleChemin
entryRuleChemin returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCheminRule()); }
	iv_ruleChemin=ruleChemin
	{ $current=$iv_ruleChemin.current.getText(); }
	EOF;

// Rule Chemin
ruleChemin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCheminAccess().getSolidusKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getCheminAccess().getIDTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCheminAccess().getFullStopKeyword_2_0());
			}
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getCheminAccess().getIDTerminalRuleCall_2_1());
			}
		)*
	)+
;

// Entry rule entryRuleDocumentation
entryRuleDocumentation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentationRule()); }
	iv_ruleDocumentation=ruleDocumentation
	{ $current=$iv_ruleDocumentation.current; }
	EOF;

// Rule Documentation
ruleDocumentation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='commentaire'
		{
			newLeafNode(otherlv_0, grammarAccess.getDocumentationAccess().getCommentaireKeyword_0());
		}
		(
			(
				lv_texte_1_0=RULE_STRING
				{
					newLeafNode(lv_texte_1_0, grammarAccess.getDocumentationAccess().getTexteSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDocumentationRule());
					}
					setWithLastConsumed(
						$current,
						"texte",
						lv_texte_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
