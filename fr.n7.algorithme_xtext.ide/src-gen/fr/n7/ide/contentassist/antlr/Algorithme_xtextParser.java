/*
 * generated by Xtext 2.32.0
 */
package fr.n7.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.ide.contentassist.antlr.internal.InternalAlgorithme_xtextParser;
import fr.n7.services.Algorithme_xtextGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class Algorithme_xtextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Algorithme_xtextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Algorithme_xtextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAlgorithmeElementsAccess().getAlternatives(), "rule__AlgorithmeElements__Alternatives");
			builder.put(grammarAccess.getRessourcesAccess().getAlternatives(), "rule__Ressources__Alternatives");
			builder.put(grammarAccess.getAlgorithmeAccess().getGroup(), "rule__Algorithme__Group__0");
			builder.put(grammarAccess.getRessourcesAccess().getGroup_0(), "rule__Ressources__Group_0__0");
			builder.put(grammarAccess.getCheminAccess().getGroup(), "rule__Chemin__Group__0");
			builder.put(grammarAccess.getCheminAccess().getGroup_2(), "rule__Chemin__Group_2__0");
			builder.put(grammarAccess.getDocumentationAccess().getGroup(), "rule__Documentation__Group__0");
			builder.put(grammarAccess.getEntreeAccess().getGroup(), "rule__Entree__Group__0");
			builder.put(grammarAccess.getSortieAccess().getGroup(), "rule__Sortie__Group__0");
			builder.put(grammarAccess.getAlgorithmeAccess().getNomAssignment_1(), "rule__Algorithme__NomAssignment_1");
			builder.put(grammarAccess.getAlgorithmeAccess().getAlgorithmeElementsAssignment_3(), "rule__Algorithme__AlgorithmeElementsAssignment_3");
			builder.put(grammarAccess.getRessourcesAccess().getCheminAssignment_0_1(), "rule__Ressources__CheminAssignment_0_1");
			builder.put(grammarAccess.getRessourcesAccess().getScriptAssignment_1(), "rule__Ressources__ScriptAssignment_1");
			builder.put(grammarAccess.getDocumentationAccess().getTexteAssignment_1(), "rule__Documentation__TexteAssignment_1");
			builder.put(grammarAccess.getEntreeAccess().getNomAssignment_1(), "rule__Entree__NomAssignment_1");
			builder.put(grammarAccess.getEntreeAccess().getValeurAssignment_3(), "rule__Entree__ValeurAssignment_3");
			builder.put(grammarAccess.getSortieAccess().getNomAssignment_1(), "rule__Sortie__NomAssignment_1");
			builder.put(grammarAccess.getSortieAccess().getValeurAssignment_3(), "rule__Sortie__ValeurAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Algorithme_xtextGrammarAccess grammarAccess;

	@Override
	protected InternalAlgorithme_xtextParser createParser() {
		InternalAlgorithme_xtextParser result = new InternalAlgorithme_xtextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Algorithme_xtextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Algorithme_xtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
