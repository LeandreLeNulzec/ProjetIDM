/*
 * generated by Xtext 2.32.0
 */
grammar InternalAlgorithme_xtext;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.n7.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.n7.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.n7.services.Algorithme_xtextGrammarAccess;

}
@parser::members {
	private Algorithme_xtextGrammarAccess grammarAccess;

	public void setGrammarAccess(Algorithme_xtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAlgorithme
entryRuleAlgorithme
:
{ before(grammarAccess.getAlgorithmeRule()); }
	 ruleAlgorithme
{ after(grammarAccess.getAlgorithmeRule()); } 
	 EOF 
;

// Rule Algorithme
ruleAlgorithme 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmeAccess().getGroup()); }
		(rule__Algorithme__Group__0)
		{ after(grammarAccess.getAlgorithmeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlgorithmeElements
entryRuleAlgorithmeElements
:
{ before(grammarAccess.getAlgorithmeElementsRule()); }
	 ruleAlgorithmeElements
{ after(grammarAccess.getAlgorithmeElementsRule()); } 
	 EOF 
;

// Rule AlgorithmeElements
ruleAlgorithmeElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlgorithmeElementsAccess().getAlternatives()); }
		(rule__AlgorithmeElements__Alternatives)
		{ after(grammarAccess.getAlgorithmeElementsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRessources
entryRuleRessources
:
{ before(grammarAccess.getRessourcesRule()); }
	 ruleRessources
{ after(grammarAccess.getRessourcesRule()); } 
	 EOF 
;

// Rule Ressources
ruleRessources 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRessourcesAccess().getAlternatives()); }
		(rule__Ressources__Alternatives)
		{ after(grammarAccess.getRessourcesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChemin
entryRuleChemin
:
{ before(grammarAccess.getCheminRule()); }
	 ruleChemin
{ after(grammarAccess.getCheminRule()); } 
	 EOF 
;

// Rule Chemin
ruleChemin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getCheminAccess().getGroup()); }
			(rule__Chemin__Group__0)
			{ after(grammarAccess.getCheminAccess().getGroup()); }
		)
		(
			{ before(grammarAccess.getCheminAccess().getGroup()); }
			(rule__Chemin__Group__0)*
			{ after(grammarAccess.getCheminAccess().getGroup()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDocumentation
entryRuleDocumentation
:
{ before(grammarAccess.getDocumentationRule()); }
	 ruleDocumentation
{ after(grammarAccess.getDocumentationRule()); } 
	 EOF 
;

// Rule Documentation
ruleDocumentation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentationAccess().getGroup()); }
		(rule__Documentation__Group__0)
		{ after(grammarAccess.getDocumentationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AlgorithmeElements__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmeElementsAccess().getRessourcesParserRuleCall_0()); }
		ruleRessources
		{ after(grammarAccess.getAlgorithmeElementsAccess().getRessourcesParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmeElementsAccess().getDocumentationParserRuleCall_1()); }
		ruleDocumentation
		{ after(grammarAccess.getAlgorithmeElementsAccess().getDocumentationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressources__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRessourcesAccess().getGroup_0()); }
		(rule__Ressources__Group_0__0)
		{ after(grammarAccess.getRessourcesAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRessourcesAccess().getScriptAssignment_1()); }
		(rule__Ressources__ScriptAssignment_1)
		{ after(grammarAccess.getRessourcesAccess().getScriptAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithme__Group__0__Impl
	rule__Algorithme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmeAccess().getAlgorithmeKeyword_0()); }
	'algorithme'
	{ after(grammarAccess.getAlgorithmeAccess().getAlgorithmeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithme__Group__1__Impl
	rule__Algorithme__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmeAccess().getNomAssignment_1()); }
	(rule__Algorithme__NomAssignment_1)
	{ after(grammarAccess.getAlgorithmeAccess().getNomAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithme__Group__2__Impl
	rule__Algorithme__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getAlgorithmeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithme__Group__3__Impl
	rule__Algorithme__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmeAccess().getAlgorithmeElementsAssignment_3()); }
	(rule__Algorithme__AlgorithmeElementsAssignment_3)*
	{ after(grammarAccess.getAlgorithmeAccess().getAlgorithmeElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Algorithme__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlgorithmeAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getAlgorithmeAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ressources__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ressources__Group_0__0__Impl
	rule__Ressources__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressources__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRessourcesAccess().getRessourcesKeyword_0_0()); }
	'Ressources :'
	{ after(grammarAccess.getRessourcesAccess().getRessourcesKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressources__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ressources__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressources__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRessourcesAccess().getCheminAssignment_0_1()); }
	(rule__Ressources__CheminAssignment_0_1)
	{ after(grammarAccess.getRessourcesAccess().getCheminAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Chemin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chemin__Group__0__Impl
	rule__Chemin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheminAccess().getSolidusKeyword_0()); }
	'/'
	{ after(grammarAccess.getCheminAccess().getSolidusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chemin__Group__1__Impl
	rule__Chemin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheminAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getCheminAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chemin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheminAccess().getGroup_2()); }
	(rule__Chemin__Group_2__0)*
	{ after(grammarAccess.getCheminAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Chemin__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chemin__Group_2__0__Impl
	rule__Chemin__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheminAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getCheminAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chemin__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Chemin__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheminAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
	{ after(grammarAccess.getCheminAccess().getIDTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Documentation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__0__Impl
	rule__Documentation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getCommentaireKeyword_0()); }
	'commentaire'
	{ after(grammarAccess.getDocumentationAccess().getCommentaireKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getTexteAssignment_1()); }
	(rule__Documentation__TexteAssignment_1)
	{ after(grammarAccess.getDocumentationAccess().getTexteAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Algorithme__NomAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmeAccess().getNomIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAlgorithmeAccess().getNomIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithme__AlgorithmeElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmeAccess().getAlgorithmeElementsAlgorithmeElementsParserRuleCall_3_0()); }
		ruleAlgorithmeElements
		{ after(grammarAccess.getAlgorithmeAccess().getAlgorithmeElementsAlgorithmeElementsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressources__CheminAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRessourcesAccess().getCheminCheminParserRuleCall_0_1_0()); }
		ruleChemin
		{ after(grammarAccess.getRessourcesAccess().getCheminCheminParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressources__ScriptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRessourcesAccess().getScriptIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRessourcesAccess().getScriptIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__TexteAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDocumentationAccess().getTexteSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDocumentationAccess().getTexteSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
