/**
 * generated by Xtext 2.32.0
 */
package fr.n7.table_xtext.util;

import fr.n7.table_xtext.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.n7.table_xtext.Table_xtextPackage
 * @generated
 */
public class Table_xtextAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Table_xtextPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table_xtextAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = Table_xtextPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Table_xtextSwitch<Adapter> modelSwitch =
    new Table_xtextSwitch<Adapter>()
    {
      @Override
      public Adapter caseTable(Table object)
      {
        return createTableAdapter();
      }
      @Override
      public Adapter caseColonnes(Colonnes object)
      {
        return createColonnesAdapter();
      }
      @Override
      public Adapter caseColonne(Colonne object)
      {
        return createColonneAdapter();
      }
      @Override
      public Adapter caseColonneProvient(ColonneProvient object)
      {
        return createColonneProvientAdapter();
      }
      @Override
      public Adapter caseColonneDerivee(ColonneDerivee object)
      {
        return createColonneDeriveeAdapter();
      }
      @Override
      public Adapter caseContrainte(Contrainte object)
      {
        return createContrainteAdapter();
      }
      @Override
      public Adapter caseEt(Et object)
      {
        return createEtAdapter();
      }
      @Override
      public Adapter caseOu(Ou object)
      {
        return createOuAdapter();
      }
      @Override
      public Adapter casePredicat(Predicat object)
      {
        return createPredicatAdapter();
      }
      @Override
      public Adapter casePredicatColonne(PredicatColonne object)
      {
        return createPredicatColonneAdapter();
      }
      @Override
      public Adapter casePredicatValeur(PredicatValeur object)
      {
        return createPredicatValeurAdapter();
      }
      @Override
      public Adapter caseScript(Script object)
      {
        return createScriptAdapter();
      }
      @Override
      public Adapter caseScriptElements(ScriptElements object)
      {
        return createScriptElementsAdapter();
      }
      @Override
      public Adapter caseConstante(Constante object)
      {
        return createConstanteAdapter();
      }
      @Override
      public Adapter caseBloc(Bloc object)
      {
        return createBlocAdapter();
      }
      @Override
      public Adapter caseBloc_Binaire(Bloc_Binaire object)
      {
        return createBloc_BinaireAdapter();
      }
      @Override
      public Adapter caseBloc_Unaire(Bloc_Unaire object)
      {
        return createBloc_UnaireAdapter();
      }
      @Override
      public Adapter caseBloc_Fonction(Bloc_Fonction object)
      {
        return createBloc_FonctionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Table <em>Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Table
   * @generated
   */
  public Adapter createTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Colonnes <em>Colonnes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Colonnes
   * @generated
   */
  public Adapter createColonnesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Colonne <em>Colonne</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Colonne
   * @generated
   */
  public Adapter createColonneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.ColonneProvient <em>Colonne Provient</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.ColonneProvient
   * @generated
   */
  public Adapter createColonneProvientAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.ColonneDerivee <em>Colonne Derivee</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.ColonneDerivee
   * @generated
   */
  public Adapter createColonneDeriveeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Contrainte <em>Contrainte</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Contrainte
   * @generated
   */
  public Adapter createContrainteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Et <em>Et</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Et
   * @generated
   */
  public Adapter createEtAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Ou <em>Ou</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Ou
   * @generated
   */
  public Adapter createOuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Predicat <em>Predicat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Predicat
   * @generated
   */
  public Adapter createPredicatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.PredicatColonne <em>Predicat Colonne</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.PredicatColonne
   * @generated
   */
  public Adapter createPredicatColonneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.PredicatValeur <em>Predicat Valeur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.PredicatValeur
   * @generated
   */
  public Adapter createPredicatValeurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Script <em>Script</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Script
   * @generated
   */
  public Adapter createScriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.ScriptElements <em>Script Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.ScriptElements
   * @generated
   */
  public Adapter createScriptElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Constante <em>Constante</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Constante
   * @generated
   */
  public Adapter createConstanteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Bloc <em>Bloc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Bloc
   * @generated
   */
  public Adapter createBlocAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Bloc_Binaire <em>Bloc Binaire</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Bloc_Binaire
   * @generated
   */
  public Adapter createBloc_BinaireAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Bloc_Unaire <em>Bloc Unaire</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Bloc_Unaire
   * @generated
   */
  public Adapter createBloc_UnaireAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.table_xtext.Bloc_Fonction <em>Bloc Fonction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.table_xtext.Bloc_Fonction
   * @generated
   */
  public Adapter createBloc_FonctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //Table_xtextAdapterFactory
