/**
 * generated by Xtext 2.32.0
 */
package fr.n7.table_xtext.util;

import fr.n7.table_xtext.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.n7.table_xtext.Table_xtextPackage
 * @generated
 */
public class Table_xtextSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Table_xtextPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table_xtextSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = Table_xtextPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case Table_xtextPackage.TABLE:
      {
        Table table = (Table)theEObject;
        T result = caseTable(table);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.COLONNES:
      {
        Colonnes colonnes = (Colonnes)theEObject;
        T result = caseColonnes(colonnes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.COLONNE:
      {
        Colonne colonne = (Colonne)theEObject;
        T result = caseColonne(colonne);
        if (result == null) result = caseColonnes(colonne);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.COLONNE_PROVIENT:
      {
        ColonneProvient colonneProvient = (ColonneProvient)theEObject;
        T result = caseColonneProvient(colonneProvient);
        if (result == null) result = caseColonnes(colonneProvient);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.COLONNE_DERIVEE:
      {
        ColonneDerivee colonneDerivee = (ColonneDerivee)theEObject;
        T result = caseColonneDerivee(colonneDerivee);
        if (result == null) result = caseColonnes(colonneDerivee);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.CONTRAINTE:
      {
        Contrainte contrainte = (Contrainte)theEObject;
        T result = caseContrainte(contrainte);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.ET:
      {
        Et et = (Et)theEObject;
        T result = caseEt(et);
        if (result == null) result = caseContrainte(et);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.OU:
      {
        Ou ou = (Ou)theEObject;
        T result = caseOu(ou);
        if (result == null) result = caseContrainte(ou);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.PREDICAT:
      {
        Predicat predicat = (Predicat)theEObject;
        T result = casePredicat(predicat);
        if (result == null) result = caseContrainte(predicat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.PREDICAT_COLONNE:
      {
        PredicatColonne predicatColonne = (PredicatColonne)theEObject;
        T result = casePredicatColonne(predicatColonne);
        if (result == null) result = casePredicat(predicatColonne);
        if (result == null) result = caseContrainte(predicatColonne);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.PREDICAT_VALEUR:
      {
        PredicatValeur predicatValeur = (PredicatValeur)theEObject;
        T result = casePredicatValeur(predicatValeur);
        if (result == null) result = casePredicat(predicatValeur);
        if (result == null) result = caseContrainte(predicatValeur);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.SCRIPT:
      {
        Script script = (Script)theEObject;
        T result = caseScript(script);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.SCRIPT_ELEMENTS:
      {
        ScriptElements scriptElements = (ScriptElements)theEObject;
        T result = caseScriptElements(scriptElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.ARGUMENT:
      {
        Argument argument = (Argument)theEObject;
        T result = caseArgument(argument);
        if (result == null) result = caseScriptElements(argument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.CONSTANTE:
      {
        Constante constante = (Constante)theEObject;
        T result = caseConstante(constante);
        if (result == null) result = caseScriptElements(constante);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.BLOC:
      {
        Bloc bloc = (Bloc)theEObject;
        T result = caseBloc(bloc);
        if (result == null) result = caseScriptElements(bloc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.BLOC_BINAIRE:
      {
        Bloc_Binaire bloc_Binaire = (Bloc_Binaire)theEObject;
        T result = caseBloc_Binaire(bloc_Binaire);
        if (result == null) result = caseBloc(bloc_Binaire);
        if (result == null) result = caseScriptElements(bloc_Binaire);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.BLOC_UNAIRE:
      {
        Bloc_Unaire bloc_Unaire = (Bloc_Unaire)theEObject;
        T result = caseBloc_Unaire(bloc_Unaire);
        if (result == null) result = caseBloc(bloc_Unaire);
        if (result == null) result = caseScriptElements(bloc_Unaire);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Table_xtextPackage.BLOC_FONCTION:
      {
        Bloc_Fonction bloc_Fonction = (Bloc_Fonction)theEObject;
        T result = caseBloc_Fonction(bloc_Fonction);
        if (result == null) result = caseBloc(bloc_Fonction);
        if (result == null) result = caseScriptElements(bloc_Fonction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTable(Table object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Colonnes</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Colonnes</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColonnes(Colonnes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Colonne</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Colonne</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColonne(Colonne object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Colonne Provient</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Colonne Provient</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColonneProvient(ColonneProvient object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Colonne Derivee</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Colonne Derivee</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColonneDerivee(ColonneDerivee object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contrainte</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contrainte</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContrainte(Contrainte object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Et</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Et</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEt(Et object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ou</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ou</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOu(Ou object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicat(Predicat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicat Colonne</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicat Colonne</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicatColonne(PredicatColonne object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicat Valeur</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicat Valeur</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicatValeur(PredicatValeur object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Script</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Script</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScript(Script object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Script Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Script Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScriptElements(ScriptElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgument(Argument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constante</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constante</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstante(Constante object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bloc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bloc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBloc(Bloc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bloc Binaire</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bloc Binaire</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBloc_Binaire(Bloc_Binaire object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bloc Unaire</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bloc Unaire</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBloc_Unaire(Bloc_Unaire object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bloc Fonction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bloc Fonction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBloc_Fonction(Bloc_Fonction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //Table_xtextSwitch
