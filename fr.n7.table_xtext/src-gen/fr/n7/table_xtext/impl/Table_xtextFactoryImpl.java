/**
 * generated by Xtext 2.32.0
 */
package fr.n7.table_xtext.impl;

import fr.n7.table_xtext.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Table_xtextFactoryImpl extends EFactoryImpl implements Table_xtextFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Table_xtextFactory init()
  {
    try
    {
      Table_xtextFactory theTable_xtextFactory = (Table_xtextFactory)EPackage.Registry.INSTANCE.getEFactory(Table_xtextPackage.eNS_URI);
      if (theTable_xtextFactory != null)
      {
        return theTable_xtextFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Table_xtextFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table_xtextFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Table_xtextPackage.TABLE: return createTable();
      case Table_xtextPackage.COLONNES: return createColonnes();
      case Table_xtextPackage.COLONNE: return createColonne();
      case Table_xtextPackage.COLONNE_PROVIENT: return createColonneProvient();
      case Table_xtextPackage.COLONNE_DERIVEE: return createColonneDerivee();
      case Table_xtextPackage.CONTRAINTE: return createContrainte();
      case Table_xtextPackage.ET: return createEt();
      case Table_xtextPackage.OU: return createOu();
      case Table_xtextPackage.PREDICAT: return createPredicat();
      case Table_xtextPackage.PREDICAT_COLONNE: return createPredicatColonne();
      case Table_xtextPackage.PREDICAT_VALEUR: return createPredicatValeur();
      case Table_xtextPackage.SCRIPT: return createScript();
      case Table_xtextPackage.SCRIPT_ELEMENTS: return createScriptElements();
      case Table_xtextPackage.ARGUMENT: return createArgument();
      case Table_xtextPackage.CONSTANTE: return createConstante();
      case Table_xtextPackage.BLOC: return createBloc();
      case Table_xtextPackage.BLOC_BINAIRE: return createBloc_Binaire();
      case Table_xtextPackage.BLOC_UNAIRE: return createBloc_Unaire();
      case Table_xtextPackage.BLOC_FONCTION: return createBloc_Fonction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Table_xtextPackage.COLONNE_ELEMENT_TYPE:
        return createColonneElementTypeFromString(eDataType, initialValue);
      case Table_xtextPackage.CONDITION:
        return createConditionFromString(eDataType, initialValue);
      case Table_xtextPackage.BINAIRE:
        return createbinaireFromString(eDataType, initialValue);
      case Table_xtextPackage.UNAIRE:
        return createunaireFromString(eDataType, initialValue);
      case Table_xtextPackage.FONCTION:
        return createfonctionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Table_xtextPackage.COLONNE_ELEMENT_TYPE:
        return convertColonneElementTypeToString(eDataType, instanceValue);
      case Table_xtextPackage.CONDITION:
        return convertConditionToString(eDataType, instanceValue);
      case Table_xtextPackage.BINAIRE:
        return convertbinaireToString(eDataType, instanceValue);
      case Table_xtextPackage.UNAIRE:
        return convertunaireToString(eDataType, instanceValue);
      case Table_xtextPackage.FONCTION:
        return convertfonctionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonnes createColonnes()
  {
    ColonnesImpl colonnes = new ColonnesImpl();
    return colonnes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonne createColonne()
  {
    ColonneImpl colonne = new ColonneImpl();
    return colonne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColonneProvient createColonneProvient()
  {
    ColonneProvientImpl colonneProvient = new ColonneProvientImpl();
    return colonneProvient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColonneDerivee createColonneDerivee()
  {
    ColonneDeriveeImpl colonneDerivee = new ColonneDeriveeImpl();
    return colonneDerivee;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contrainte createContrainte()
  {
    ContrainteImpl contrainte = new ContrainteImpl();
    return contrainte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Et createEt()
  {
    EtImpl et = new EtImpl();
    return et;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ou createOu()
  {
    OuImpl ou = new OuImpl();
    return ou;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Predicat createPredicat()
  {
    PredicatImpl predicat = new PredicatImpl();
    return predicat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicatColonne createPredicatColonne()
  {
    PredicatColonneImpl predicatColonne = new PredicatColonneImpl();
    return predicatColonne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredicatValeur createPredicatValeur()
  {
    PredicatValeurImpl predicatValeur = new PredicatValeurImpl();
    return predicatValeur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Script createScript()
  {
    ScriptImpl script = new ScriptImpl();
    return script;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScriptElements createScriptElements()
  {
    ScriptElementsImpl scriptElements = new ScriptElementsImpl();
    return scriptElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constante createConstante()
  {
    ConstanteImpl constante = new ConstanteImpl();
    return constante;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bloc createBloc()
  {
    BlocImpl bloc = new BlocImpl();
    return bloc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bloc_Binaire createBloc_Binaire()
  {
    Bloc_BinaireImpl bloc_Binaire = new Bloc_BinaireImpl();
    return bloc_Binaire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bloc_Unaire createBloc_Unaire()
  {
    Bloc_UnaireImpl bloc_Unaire = new Bloc_UnaireImpl();
    return bloc_Unaire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bloc_Fonction createBloc_Fonction()
  {
    Bloc_FonctionImpl bloc_Fonction = new Bloc_FonctionImpl();
    return bloc_Fonction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColonneElementType createColonneElementTypeFromString(EDataType eDataType, String initialValue)
  {
    ColonneElementType result = ColonneElementType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColonneElementTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createConditionFromString(EDataType eDataType, String initialValue)
  {
    Condition result = Condition.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertConditionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public binaire createbinaireFromString(EDataType eDataType, String initialValue)
  {
    binaire result = binaire.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertbinaireToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unaire createunaireFromString(EDataType eDataType, String initialValue)
  {
    unaire result = unaire.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertunaireToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fonction createfonctionFromString(EDataType eDataType, String initialValue)
  {
    fonction result = fonction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertfonctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table_xtextPackage getTable_xtextPackage()
  {
    return (Table_xtextPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Table_xtextPackage getPackage()
  {
    return Table_xtextPackage.eINSTANCE;
  }

} //Table_xtextFactoryImpl
