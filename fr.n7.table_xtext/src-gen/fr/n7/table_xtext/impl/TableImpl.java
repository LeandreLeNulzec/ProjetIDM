/**
 * generated by Xtext 2.32.0
 */
package fr.n7.table_xtext.impl;

import fr.n7.table_xtext.Colonne;
import fr.n7.table_xtext.Colonnes;
import fr.n7.table_xtext.Script;
import fr.n7.table_xtext.Table;
import fr.n7.table_xtext.Table_xtextPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Table</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.table_xtext.impl.TableImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.n7.table_xtext.impl.TableImpl#getColonnes <em>Colonnes</em>}</li>
 *   <li>{@link fr.n7.table_xtext.impl.TableImpl#getColonneID <em>Colonne ID</em>}</li>
 *   <li>{@link fr.n7.table_xtext.impl.TableImpl#getScripts <em>Scripts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TableImpl extends MinimalEObjectImpl.Container implements Table
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getColonnes() <em>Colonnes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColonnes()
   * @generated
   * @ordered
   */
  protected EList<Colonnes> colonnes;

  /**
   * The cached value of the '{@link #getColonneID() <em>Colonne ID</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColonneID()
   * @generated
   * @ordered
   */
  protected Colonne colonneID;

  /**
   * The cached value of the '{@link #getScripts() <em>Scripts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScripts()
   * @generated
   * @ordered
   */
  protected EList<Script> scripts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Table_xtextPackage.Literals.TABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Table_xtextPackage.TABLE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Colonnes> getColonnes()
  {
    if (colonnes == null)
    {
      colonnes = new EObjectContainmentEList<Colonnes>(Colonnes.class, this, Table_xtextPackage.TABLE__COLONNES);
    }
    return colonnes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonne getColonneID()
  {
    if (colonneID != null && colonneID.eIsProxy())
    {
      InternalEObject oldColonneID = (InternalEObject)colonneID;
      colonneID = (Colonne)eResolveProxy(oldColonneID);
      if (colonneID != oldColonneID)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, Table_xtextPackage.TABLE__COLONNE_ID, oldColonneID, colonneID));
      }
    }
    return colonneID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Colonne basicGetColonneID()
  {
    return colonneID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColonneID(Colonne newColonneID)
  {
    Colonne oldColonneID = colonneID;
    colonneID = newColonneID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Table_xtextPackage.TABLE__COLONNE_ID, oldColonneID, colonneID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Script> getScripts()
  {
    if (scripts == null)
    {
      scripts = new EObjectContainmentEList<Script>(Script.class, this, Table_xtextPackage.TABLE__SCRIPTS);
    }
    return scripts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Table_xtextPackage.TABLE__COLONNES:
        return ((InternalEList<?>)getColonnes()).basicRemove(otherEnd, msgs);
      case Table_xtextPackage.TABLE__SCRIPTS:
        return ((InternalEList<?>)getScripts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Table_xtextPackage.TABLE__NAME:
        return getName();
      case Table_xtextPackage.TABLE__COLONNES:
        return getColonnes();
      case Table_xtextPackage.TABLE__COLONNE_ID:
        if (resolve) return getColonneID();
        return basicGetColonneID();
      case Table_xtextPackage.TABLE__SCRIPTS:
        return getScripts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Table_xtextPackage.TABLE__NAME:
        setName((String)newValue);
        return;
      case Table_xtextPackage.TABLE__COLONNES:
        getColonnes().clear();
        getColonnes().addAll((Collection<? extends Colonnes>)newValue);
        return;
      case Table_xtextPackage.TABLE__COLONNE_ID:
        setColonneID((Colonne)newValue);
        return;
      case Table_xtextPackage.TABLE__SCRIPTS:
        getScripts().clear();
        getScripts().addAll((Collection<? extends Script>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Table_xtextPackage.TABLE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Table_xtextPackage.TABLE__COLONNES:
        getColonnes().clear();
        return;
      case Table_xtextPackage.TABLE__COLONNE_ID:
        setColonneID((Colonne)null);
        return;
      case Table_xtextPackage.TABLE__SCRIPTS:
        getScripts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Table_xtextPackage.TABLE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Table_xtextPackage.TABLE__COLONNES:
        return colonnes != null && !colonnes.isEmpty();
      case Table_xtextPackage.TABLE__COLONNE_ID:
        return colonneID != null;
      case Table_xtextPackage.TABLE__SCRIPTS:
        return scripts != null && !scripts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TableImpl
