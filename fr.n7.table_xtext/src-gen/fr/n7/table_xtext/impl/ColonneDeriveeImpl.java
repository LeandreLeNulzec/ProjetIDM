/**
 * generated by Xtext 2.32.0
 */
package fr.n7.table_xtext.impl;

import fr.n7.table_xtext.Colonne;
import fr.n7.table_xtext.ColonneDerivee;
import fr.n7.table_xtext.Script;
import fr.n7.table_xtext.Table_xtextPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Colonne Derivee</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.table_xtext.impl.ColonneDeriveeImpl#getScript <em>Script</em>}</li>
 *   <li>{@link fr.n7.table_xtext.impl.ColonneDeriveeImpl#getColonnesEntrees <em>Colonnes Entrees</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ColonneDeriveeImpl extends ColonnesImpl implements ColonneDerivee
{
  /**
   * The cached value of the '{@link #getScript() <em>Script</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScript()
   * @generated
   * @ordered
   */
  protected Script script;

  /**
   * The cached value of the '{@link #getColonnesEntrees() <em>Colonnes Entrees</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColonnesEntrees()
   * @generated
   * @ordered
   */
  protected EList<Colonne> colonnesEntrees;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ColonneDeriveeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Table_xtextPackage.Literals.COLONNE_DERIVEE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Script getScript()
  {
    if (script != null && script.eIsProxy())
    {
      InternalEObject oldScript = (InternalEObject)script;
      script = (Script)eResolveProxy(oldScript);
      if (script != oldScript)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, Table_xtextPackage.COLONNE_DERIVEE__SCRIPT, oldScript, script));
      }
    }
    return script;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Script basicGetScript()
  {
    return script;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScript(Script newScript)
  {
    Script oldScript = script;
    script = newScript;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Table_xtextPackage.COLONNE_DERIVEE__SCRIPT, oldScript, script));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Colonne> getColonnesEntrees()
  {
    if (colonnesEntrees == null)
    {
      colonnesEntrees = new EObjectResolvingEList<Colonne>(Colonne.class, this, Table_xtextPackage.COLONNE_DERIVEE__COLONNES_ENTREES);
    }
    return colonnesEntrees;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Table_xtextPackage.COLONNE_DERIVEE__SCRIPT:
        if (resolve) return getScript();
        return basicGetScript();
      case Table_xtextPackage.COLONNE_DERIVEE__COLONNES_ENTREES:
        return getColonnesEntrees();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Table_xtextPackage.COLONNE_DERIVEE__SCRIPT:
        setScript((Script)newValue);
        return;
      case Table_xtextPackage.COLONNE_DERIVEE__COLONNES_ENTREES:
        getColonnesEntrees().clear();
        getColonnesEntrees().addAll((Collection<? extends Colonne>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Table_xtextPackage.COLONNE_DERIVEE__SCRIPT:
        setScript((Script)null);
        return;
      case Table_xtextPackage.COLONNE_DERIVEE__COLONNES_ENTREES:
        getColonnesEntrees().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Table_xtextPackage.COLONNE_DERIVEE__SCRIPT:
        return script != null;
      case Table_xtextPackage.COLONNE_DERIVEE__COLONNES_ENTREES:
        return colonnesEntrees != null && !colonnesEntrees.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ColonneDeriveeImpl
