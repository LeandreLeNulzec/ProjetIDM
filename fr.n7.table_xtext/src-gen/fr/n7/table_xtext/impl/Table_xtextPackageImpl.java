/**
 * generated by Xtext 2.32.0
 */
package fr.n7.table_xtext.impl;

import fr.n7.table_xtext.Bloc;
import fr.n7.table_xtext.Bloc_Binaire;
import fr.n7.table_xtext.Bloc_Fonction;
import fr.n7.table_xtext.Bloc_Unaire;
import fr.n7.table_xtext.Colonne;
import fr.n7.table_xtext.ColonneDerivee;
import fr.n7.table_xtext.ColonneElementType;
import fr.n7.table_xtext.ColonneProvient;
import fr.n7.table_xtext.Colonnes;
import fr.n7.table_xtext.Condition;
import fr.n7.table_xtext.Constante;
import fr.n7.table_xtext.Contrainte;
import fr.n7.table_xtext.Et;
import fr.n7.table_xtext.Ou;
import fr.n7.table_xtext.Predicat;
import fr.n7.table_xtext.PredicatColonne;
import fr.n7.table_xtext.PredicatValeur;
import fr.n7.table_xtext.Script;
import fr.n7.table_xtext.ScriptElements;
import fr.n7.table_xtext.Table;
import fr.n7.table_xtext.Table_xtextFactory;
import fr.n7.table_xtext.Table_xtextPackage;
import fr.n7.table_xtext.binaire;
import fr.n7.table_xtext.fonction;
import fr.n7.table_xtext.unaire;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Table_xtextPackageImpl extends EPackageImpl implements Table_xtextPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colonnesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colonneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colonneProvientEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colonneDeriveeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass contrainteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass etEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ouEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predicatEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predicatColonneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predicatValeurEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scriptEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scriptElementsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constanteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass blocEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bloc_BinaireEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bloc_UnaireEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bloc_FonctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum colonneElementTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum conditionEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum binaireEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum unaireEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum fonctionEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see fr.n7.table_xtext.Table_xtextPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private Table_xtextPackageImpl()
  {
    super(eNS_URI, Table_xtextFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link Table_xtextPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static Table_xtextPackage init()
  {
    if (isInited) return (Table_xtextPackage)EPackage.Registry.INSTANCE.getEPackage(Table_xtextPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredTable_xtextPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    Table_xtextPackageImpl theTable_xtextPackage = registeredTable_xtextPackage instanceof Table_xtextPackageImpl ? (Table_xtextPackageImpl)registeredTable_xtextPackage : new Table_xtextPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theTable_xtextPackage.createPackageContents();

    // Initialize created meta-data
    theTable_xtextPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theTable_xtextPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(Table_xtextPackage.eNS_URI, theTable_xtextPackage);
    return theTable_xtextPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTable()
  {
    return tableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTable_Name()
  {
    return (EAttribute)tableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTable_Colonnes()
  {
    return (EReference)tableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTable_ColonneID()
  {
    return (EReference)tableEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTable_Scripts()
  {
    return (EReference)tableEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColonnes()
  {
    return colonnesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColonnes_Name()
  {
    return (EAttribute)colonnesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColonnes_ElementType()
  {
    return (EAttribute)colonnesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColonnes_Contraintes()
  {
    return (EReference)colonnesEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColonnes_NbLignes()
  {
    return (EAttribute)colonnesEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColonne()
  {
    return colonneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColonneProvient()
  {
    return colonneProvientEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColonneProvient_TableOrigin()
  {
    return (EReference)colonneProvientEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColonneProvient_RefColonne()
  {
    return (EAttribute)colonneProvientEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColonneDerivee()
  {
    return colonneDeriveeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColonneDerivee_Script()
  {
    return (EReference)colonneDeriveeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getColonneDerivee_ColonnesEntrees()
  {
    return (EReference)colonneDeriveeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getContrainte()
  {
    return contrainteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEt()
  {
    return etEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEt_Variables()
  {
    return (EReference)etEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOu()
  {
    return ouEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOu_Variables()
  {
    return (EReference)ouEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredicat()
  {
    return predicatEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredicat_Condition()
  {
    return (EAttribute)predicatEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredicatColonne()
  {
    return predicatColonneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPredicatColonne_Colonne()
  {
    return (EReference)predicatColonneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredicatValeur()
  {
    return predicatValeurEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredicatValeur_Valeur()
  {
    return (EAttribute)predicatValeurEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScript()
  {
    return scriptEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getScript_Name()
  {
    return (EAttribute)scriptEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getScript_ScriptElements()
  {
    return (EReference)scriptEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScriptElements()
  {
    return scriptElementsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstante()
  {
    return constanteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstante_Val()
  {
    return (EAttribute)constanteEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBloc()
  {
    return blocEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBloc_Binaire()
  {
    return bloc_BinaireEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBloc_Binaire_Operation()
  {
    return (EAttribute)bloc_BinaireEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBloc_Unaire()
  {
    return bloc_UnaireEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBloc_Unaire_Operation()
  {
    return (EAttribute)bloc_UnaireEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBloc_Fonction()
  {
    return bloc_FonctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBloc_Fonction_Operation()
  {
    return (EAttribute)bloc_FonctionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getColonneElementType()
  {
    return colonneElementTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCondition()
  {
    return conditionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getbinaire()
  {
    return binaireEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getunaire()
  {
    return unaireEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getfonction()
  {
    return fonctionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table_xtextFactory getTable_xtextFactory()
  {
    return (Table_xtextFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    tableEClass = createEClass(TABLE);
    createEAttribute(tableEClass, TABLE__NAME);
    createEReference(tableEClass, TABLE__COLONNES);
    createEReference(tableEClass, TABLE__COLONNE_ID);
    createEReference(tableEClass, TABLE__SCRIPTS);

    colonnesEClass = createEClass(COLONNES);
    createEAttribute(colonnesEClass, COLONNES__NAME);
    createEAttribute(colonnesEClass, COLONNES__ELEMENT_TYPE);
    createEReference(colonnesEClass, COLONNES__CONTRAINTES);
    createEAttribute(colonnesEClass, COLONNES__NB_LIGNES);

    colonneEClass = createEClass(COLONNE);

    colonneProvientEClass = createEClass(COLONNE_PROVIENT);
    createEReference(colonneProvientEClass, COLONNE_PROVIENT__TABLE_ORIGIN);
    createEAttribute(colonneProvientEClass, COLONNE_PROVIENT__REF_COLONNE);

    colonneDeriveeEClass = createEClass(COLONNE_DERIVEE);
    createEReference(colonneDeriveeEClass, COLONNE_DERIVEE__SCRIPT);
    createEReference(colonneDeriveeEClass, COLONNE_DERIVEE__COLONNES_ENTREES);

    contrainteEClass = createEClass(CONTRAINTE);

    etEClass = createEClass(ET);
    createEReference(etEClass, ET__VARIABLES);

    ouEClass = createEClass(OU);
    createEReference(ouEClass, OU__VARIABLES);

    predicatEClass = createEClass(PREDICAT);
    createEAttribute(predicatEClass, PREDICAT__CONDITION);

    predicatColonneEClass = createEClass(PREDICAT_COLONNE);
    createEReference(predicatColonneEClass, PREDICAT_COLONNE__COLONNE);

    predicatValeurEClass = createEClass(PREDICAT_VALEUR);
    createEAttribute(predicatValeurEClass, PREDICAT_VALEUR__VALEUR);

    scriptEClass = createEClass(SCRIPT);
    createEAttribute(scriptEClass, SCRIPT__NAME);
    createEReference(scriptEClass, SCRIPT__SCRIPT_ELEMENTS);

    scriptElementsEClass = createEClass(SCRIPT_ELEMENTS);

    constanteEClass = createEClass(CONSTANTE);
    createEAttribute(constanteEClass, CONSTANTE__VAL);

    blocEClass = createEClass(BLOC);

    bloc_BinaireEClass = createEClass(BLOC_BINAIRE);
    createEAttribute(bloc_BinaireEClass, BLOC_BINAIRE__OPERATION);

    bloc_UnaireEClass = createEClass(BLOC_UNAIRE);
    createEAttribute(bloc_UnaireEClass, BLOC_UNAIRE__OPERATION);

    bloc_FonctionEClass = createEClass(BLOC_FONCTION);
    createEAttribute(bloc_FonctionEClass, BLOC_FONCTION__OPERATION);

    // Create enums
    colonneElementTypeEEnum = createEEnum(COLONNE_ELEMENT_TYPE);
    conditionEEnum = createEEnum(CONDITION);
    binaireEEnum = createEEnum(BINAIRE);
    unaireEEnum = createEEnum(UNAIRE);
    fonctionEEnum = createEEnum(FONCTION);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    colonneEClass.getESuperTypes().add(this.getColonnes());
    colonneProvientEClass.getESuperTypes().add(this.getColonnes());
    colonneDeriveeEClass.getESuperTypes().add(this.getColonnes());
    etEClass.getESuperTypes().add(this.getContrainte());
    ouEClass.getESuperTypes().add(this.getContrainte());
    predicatEClass.getESuperTypes().add(this.getContrainte());
    predicatColonneEClass.getESuperTypes().add(this.getPredicat());
    predicatValeurEClass.getESuperTypes().add(this.getPredicat());
    constanteEClass.getESuperTypes().add(this.getScriptElements());
    blocEClass.getESuperTypes().add(this.getScriptElements());
    bloc_BinaireEClass.getESuperTypes().add(this.getBloc());
    bloc_UnaireEClass.getESuperTypes().add(this.getBloc());
    bloc_FonctionEClass.getESuperTypes().add(this.getBloc());

    // Initialize classes and features; add operations and parameters
    initEClass(tableEClass, Table.class, "Table", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTable_Name(), ecorePackage.getEString(), "name", null, 0, 1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTable_Colonnes(), this.getColonnes(), null, "colonnes", null, 0, -1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTable_ColonneID(), this.getColonne(), null, "colonneID", null, 0, 1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTable_Scripts(), this.getScript(), null, "scripts", null, 0, -1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colonnesEClass, Colonnes.class, "Colonnes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColonnes_Name(), ecorePackage.getEString(), "name", null, 0, 1, Colonnes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColonnes_ElementType(), this.getColonneElementType(), "elementType", null, 0, 1, Colonnes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColonnes_Contraintes(), this.getContrainte(), null, "contraintes", null, 0, 1, Colonnes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColonnes_NbLignes(), ecorePackage.getEInt(), "nbLignes", null, 0, 1, Colonnes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colonneEClass, Colonne.class, "Colonne", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(colonneProvientEClass, ColonneProvient.class, "ColonneProvient", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getColonneProvient_TableOrigin(), this.getTable(), null, "tableOrigin", null, 0, 1, ColonneProvient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColonneProvient_RefColonne(), ecorePackage.getEString(), "refColonne", null, 0, 1, ColonneProvient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colonneDeriveeEClass, ColonneDerivee.class, "ColonneDerivee", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getColonneDerivee_Script(), this.getScript(), null, "script", null, 0, 1, ColonneDerivee.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColonneDerivee_ColonnesEntrees(), this.getColonne(), null, "colonnesEntrees", null, 0, -1, ColonneDerivee.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(contrainteEClass, Contrainte.class, "Contrainte", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(etEClass, Et.class, "Et", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEt_Variables(), this.getContrainte(), null, "variables", null, 0, -1, Et.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ouEClass, Ou.class, "Ou", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOu_Variables(), this.getContrainte(), null, "variables", null, 0, -1, Ou.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predicatEClass, Predicat.class, "Predicat", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPredicat_Condition(), this.getCondition(), "condition", null, 0, 1, Predicat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predicatColonneEClass, PredicatColonne.class, "PredicatColonne", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPredicatColonne_Colonne(), this.getColonnes(), null, "colonne", null, 0, 1, PredicatColonne.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predicatValeurEClass, PredicatValeur.class, "PredicatValeur", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPredicatValeur_Valeur(), ecorePackage.getEString(), "valeur", null, 0, 1, PredicatValeur.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scriptEClass, Script.class, "Script", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getScript_Name(), ecorePackage.getEString(), "name", null, 0, 1, Script.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getScript_ScriptElements(), this.getScriptElements(), null, "scriptElements", null, 0, -1, Script.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scriptElementsEClass, ScriptElements.class, "ScriptElements", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(constanteEClass, Constante.class, "Constante", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConstante_Val(), ecorePackage.getEString(), "val", null, 0, 1, Constante.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(blocEClass, Bloc.class, "Bloc", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bloc_BinaireEClass, Bloc_Binaire.class, "Bloc_Binaire", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBloc_Binaire_Operation(), this.getbinaire(), "operation", null, 0, 1, Bloc_Binaire.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bloc_UnaireEClass, Bloc_Unaire.class, "Bloc_Unaire", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBloc_Unaire_Operation(), this.getunaire(), "operation", null, 0, 1, Bloc_Unaire.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bloc_FonctionEClass, Bloc_Fonction.class, "Bloc_Fonction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBloc_Fonction_Operation(), this.getfonction(), "operation", null, 0, 1, Bloc_Fonction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(colonneElementTypeEEnum, ColonneElementType.class, "ColonneElementType");
    addEEnumLiteral(colonneElementTypeEEnum, ColonneElementType.FLOAT);
    addEEnumLiteral(colonneElementTypeEEnum, ColonneElementType.INT);
    addEEnumLiteral(colonneElementTypeEEnum, ColonneElementType.STRING);
    addEEnumLiteral(colonneElementTypeEEnum, ColonneElementType.BOOL);

    initEEnum(conditionEEnum, Condition.class, "Condition");
    addEEnumLiteral(conditionEEnum, Condition.INFERIEUR_OU_EGAL);
    addEEnumLiteral(conditionEEnum, Condition.INFERIEUR_STRICT);
    addEEnumLiteral(conditionEEnum, Condition.EGAL);
    addEEnumLiteral(conditionEEnum, Condition.SUPERIEUR_STRICT);
    addEEnumLiteral(conditionEEnum, Condition.SUPERIEUR_OU_EGAL);

    initEEnum(binaireEEnum, binaire.class, "binaire");
    addEEnumLiteral(binaireEEnum, binaire.ADDITION);
    addEEnumLiteral(binaireEEnum, binaire.SOUSTRACTION);
    addEEnumLiteral(binaireEEnum, binaire.DIVISION);
    addEEnumLiteral(binaireEEnum, binaire.MULTIPLICATION);

    initEEnum(unaireEEnum, unaire.class, "unaire");
    addEEnumLiteral(unaireEEnum, unaire.OPPOSE);
    addEEnumLiteral(unaireEEnum, unaire.INVERSE);

    initEEnum(fonctionEEnum, fonction.class, "fonction");
    addEEnumLiteral(fonctionEEnum, fonction.MIN);
    addEEnumLiteral(fonctionEEnum, fonction.MAX);
    addEEnumLiteral(fonctionEEnum, fonction.SIN);
    addEEnumLiteral(fonctionEEnum, fonction.COS);
    addEEnumLiteral(fonctionEEnum, fonction.EXP);
    addEEnumLiteral(fonctionEEnum, fonction.RACINE);

    // Create resource
    createResource(eNS_URI);
  }

} //Table_xtextPackageImpl
