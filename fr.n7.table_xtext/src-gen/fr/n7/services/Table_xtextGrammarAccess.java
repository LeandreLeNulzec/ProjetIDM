/*
 * generated by Xtext 2.32.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Table_xtextGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColonnesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColonnesColonnesParserRuleCall_3_0 = (RuleCall)cColonnesAssignment_3.eContents().get(0);
		private final Keyword cSpecialeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColonneIDAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cColonneIDColonneCrossReference_5_0 = (CrossReference)cColonneIDAssignment_5.eContents().get(0);
		private final RuleCall cColonneIDColonneIDTerminalRuleCall_5_0_1 = (RuleCall)cColonneIDColonneCrossReference_5_0.eContents().get(1);
		private final Assignment cScriptsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScriptsScriptParserRuleCall_6_0 = (RuleCall)cScriptsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Table : 'table' name=ID '{'
		//    colonnes+=Colonnes*
		//    'speciale'colonneID=[Colonne]
		//    scripts += Script*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'table' name=ID '{'
		//   colonnes+=Colonnes*
		//   'speciale'colonneID=[Colonne]
		//   scripts += Script*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//colonnes+=Colonnes*
		public Assignment getColonnesAssignment_3() { return cColonnesAssignment_3; }
		
		//Colonnes
		public RuleCall getColonnesColonnesParserRuleCall_3_0() { return cColonnesColonnesParserRuleCall_3_0; }
		
		//'speciale'
		public Keyword getSpecialeKeyword_4() { return cSpecialeKeyword_4; }
		
		//colonneID=[Colonne]
		public Assignment getColonneIDAssignment_5() { return cColonneIDAssignment_5; }
		
		//[Colonne]
		public CrossReference getColonneIDColonneCrossReference_5_0() { return cColonneIDColonneCrossReference_5_0; }
		
		//ID
		public RuleCall getColonneIDColonneIDTerminalRuleCall_5_0_1() { return cColonneIDColonneIDTerminalRuleCall_5_0_1; }
		
		//scripts += Script*
		public Assignment getScriptsAssignment_6() { return cScriptsAssignment_6; }
		
		//Script
		public RuleCall getScriptsScriptParserRuleCall_6_0() { return cScriptsScriptParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ColonnesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Colonnes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonneProvientParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColonneDeriveeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Colonnes : (Colonne | ColonneProvient | ColonneDerivee);
		@Override public ParserRule getRule() { return rule; }
		
		//(Colonne | ColonneProvient | ColonneDerivee)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Colonne
		public RuleCall getColonneParserRuleCall_0() { return cColonneParserRuleCall_0; }
		
		//ColonneProvient
		public RuleCall getColonneProvientParserRuleCall_1() { return cColonneProvientParserRuleCall_1; }
		
		//ColonneDerivee
		public RuleCall getColonneDeriveeParserRuleCall_2() { return cColonneDeriveeParserRuleCall_2; }
	}
	public class ColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Colonne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIndiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndiceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndiceINTTerminalRuleCall_3_0 = (RuleCall)cIndiceAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementTypeColonneElementTypeEnumRuleCall_5_0 = (RuleCall)cElementTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cContrainteKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cContraintesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cContraintesContrainteParserRuleCall_6_1_0 = (RuleCall)cContraintesAssignment_6_1.eContents().get(0);
		private final Keyword cNblignesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNbLignesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNbLignesINTTerminalRuleCall_8_0 = (RuleCall)cNbLignesAssignment_8.eContents().get(0);
		
		//Colonne : 'c' name=ID
		//    'indice' indice = INT
		//    'type' elementType=ColonneElementType
		//    ('contrainte' contraintes=Contrainte)?
		//    'nblignes' nbLignes=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'c' name=ID
		//   'indice' indice = INT
		//   'type' elementType=ColonneElementType
		//   ('contrainte' contraintes=Contrainte)?
		//   'nblignes' nbLignes=INT
		public Group getGroup() { return cGroup; }
		
		//'c'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'indice'
		public Keyword getIndiceKeyword_2() { return cIndiceKeyword_2; }
		
		//indice = INT
		public Assignment getIndiceAssignment_3() { return cIndiceAssignment_3; }
		
		//INT
		public RuleCall getIndiceINTTerminalRuleCall_3_0() { return cIndiceINTTerminalRuleCall_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//elementType=ColonneElementType
		public Assignment getElementTypeAssignment_5() { return cElementTypeAssignment_5; }
		
		//ColonneElementType
		public RuleCall getElementTypeColonneElementTypeEnumRuleCall_5_0() { return cElementTypeColonneElementTypeEnumRuleCall_5_0; }
		
		//('contrainte' contraintes=Contrainte)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'contrainte'
		public Keyword getContrainteKeyword_6_0() { return cContrainteKeyword_6_0; }
		
		//contraintes=Contrainte
		public Assignment getContraintesAssignment_6_1() { return cContraintesAssignment_6_1; }
		
		//Contrainte
		public RuleCall getContraintesContrainteParserRuleCall_6_1_0() { return cContraintesContrainteParserRuleCall_6_1_0; }
		
		//'nblignes'
		public Keyword getNblignesKeyword_7() { return cNblignesKeyword_7; }
		
		//nbLignes=INT
		public Assignment getNbLignesAssignment_8() { return cNbLignesAssignment_8; }
		
		//INT
		public RuleCall getNbLignesINTTerminalRuleCall_8_0() { return cNbLignesINTTerminalRuleCall_8_0; }
	}
	public class ColonneProvientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.ColonneProvient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIndiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndiceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndiceINTTerminalRuleCall_3_0 = (RuleCall)cIndiceAssignment_3.eContents().get(0);
		private final Keyword cTableOrigineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTableOriginAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTableOriginTableParserRuleCall_5_0 = (RuleCall)cTableOriginAssignment_5.eContents().get(0);
		private final Keyword cRefColonneKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRefColonneAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRefColonneIDTerminalRuleCall_7_0 = (RuleCall)cRefColonneAssignment_7.eContents().get(0);
		private final Keyword cTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cElementTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElementTypeColonneElementTypeEnumRuleCall_9_0 = (RuleCall)cElementTypeAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cContrainteKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cContraintesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cContraintesContrainteParserRuleCall_10_1_0 = (RuleCall)cContraintesAssignment_10_1.eContents().get(0);
		private final Keyword cNblignesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cNbLignesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cNbLignesINTTerminalRuleCall_12_0 = (RuleCall)cNbLignesAssignment_12.eContents().get(0);
		
		//ColonneProvient : 'cp' name=ID
		//    'indice' indice = INT
		//    'tableOrigine' tableOrigin=Table
		//    'refColonne' refColonne=ID
		//    'type' elementType=ColonneElementType
		//    ('contrainte' contraintes=Contrainte)?
		//    'nblignes' nbLignes=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'cp' name=ID
		//   'indice' indice = INT
		//   'tableOrigine' tableOrigin=Table
		//   'refColonne' refColonne=ID
		//   'type' elementType=ColonneElementType
		//   ('contrainte' contraintes=Contrainte)?
		//   'nblignes' nbLignes=INT
		public Group getGroup() { return cGroup; }
		
		//'cp'
		public Keyword getCpKeyword_0() { return cCpKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'indice'
		public Keyword getIndiceKeyword_2() { return cIndiceKeyword_2; }
		
		//indice = INT
		public Assignment getIndiceAssignment_3() { return cIndiceAssignment_3; }
		
		//INT
		public RuleCall getIndiceINTTerminalRuleCall_3_0() { return cIndiceINTTerminalRuleCall_3_0; }
		
		//'tableOrigine'
		public Keyword getTableOrigineKeyword_4() { return cTableOrigineKeyword_4; }
		
		//tableOrigin=Table
		public Assignment getTableOriginAssignment_5() { return cTableOriginAssignment_5; }
		
		//Table
		public RuleCall getTableOriginTableParserRuleCall_5_0() { return cTableOriginTableParserRuleCall_5_0; }
		
		//'refColonne'
		public Keyword getRefColonneKeyword_6() { return cRefColonneKeyword_6; }
		
		//refColonne=ID
		public Assignment getRefColonneAssignment_7() { return cRefColonneAssignment_7; }
		
		//ID
		public RuleCall getRefColonneIDTerminalRuleCall_7_0() { return cRefColonneIDTerminalRuleCall_7_0; }
		
		//'type'
		public Keyword getTypeKeyword_8() { return cTypeKeyword_8; }
		
		//elementType=ColonneElementType
		public Assignment getElementTypeAssignment_9() { return cElementTypeAssignment_9; }
		
		//ColonneElementType
		public RuleCall getElementTypeColonneElementTypeEnumRuleCall_9_0() { return cElementTypeColonneElementTypeEnumRuleCall_9_0; }
		
		//('contrainte' contraintes=Contrainte)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'contrainte'
		public Keyword getContrainteKeyword_10_0() { return cContrainteKeyword_10_0; }
		
		//contraintes=Contrainte
		public Assignment getContraintesAssignment_10_1() { return cContraintesAssignment_10_1; }
		
		//Contrainte
		public RuleCall getContraintesContrainteParserRuleCall_10_1_0() { return cContraintesContrainteParserRuleCall_10_1_0; }
		
		//'nblignes'
		public Keyword getNblignesKeyword_11() { return cNblignesKeyword_11; }
		
		//nbLignes=INT
		public Assignment getNbLignesAssignment_12() { return cNbLignesAssignment_12; }
		
		//INT
		public RuleCall getNbLignesINTTerminalRuleCall_12_0() { return cNbLignesINTTerminalRuleCall_12_0; }
	}
	public class ColonneDeriveeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.ColonneDerivee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIndiceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndiceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIndiceINTTerminalRuleCall_3_0 = (RuleCall)cIndiceAssignment_3.eContents().get(0);
		private final Keyword cAlgoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScriptAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cScriptScriptCrossReference_5_0 = (CrossReference)cScriptAssignment_5.eContents().get(0);
		private final RuleCall cScriptScriptIDTerminalRuleCall_5_0_1 = (RuleCall)cScriptScriptCrossReference_5_0.eContents().get(1);
		private final Keyword cEntreesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cColonnesEntreesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cColonnesEntreesColonneCrossReference_7_0 = (CrossReference)cColonnesEntreesAssignment_7.eContents().get(0);
		private final RuleCall cColonnesEntreesColonneIDTerminalRuleCall_7_0_1 = (RuleCall)cColonnesEntreesColonneCrossReference_7_0.eContents().get(1);
		private final Keyword cTypeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cElementTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElementTypeColonneElementTypeEnumRuleCall_9_0 = (RuleCall)cElementTypeAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cContrainteKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cContraintesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cContraintesContrainteParserRuleCall_10_1_0 = (RuleCall)cContraintesAssignment_10_1.eContents().get(0);
		private final Keyword cNblignesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cNbLignesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cNbLignesINTTerminalRuleCall_12_0 = (RuleCall)cNbLignesAssignment_12.eContents().get(0);
		
		//ColonneDerivee : 'cd' name=ID
		//    'indice' indice = INT
		//    'algo' script=[Script]
		//    'entrees' colonnesEntrees+=[Colonne]*
		//    'type' elementType=ColonneElementType
		//    ('contrainte' contraintes=Contrainte)?
		//    'nblignes' nbLignes=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'cd' name=ID
		//   'indice' indice = INT
		//   'algo' script=[Script]
		//   'entrees' colonnesEntrees+=[Colonne]*
		//   'type' elementType=ColonneElementType
		//   ('contrainte' contraintes=Contrainte)?
		//   'nblignes' nbLignes=INT
		public Group getGroup() { return cGroup; }
		
		//'cd'
		public Keyword getCdKeyword_0() { return cCdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'indice'
		public Keyword getIndiceKeyword_2() { return cIndiceKeyword_2; }
		
		//indice = INT
		public Assignment getIndiceAssignment_3() { return cIndiceAssignment_3; }
		
		//INT
		public RuleCall getIndiceINTTerminalRuleCall_3_0() { return cIndiceINTTerminalRuleCall_3_0; }
		
		//'algo'
		public Keyword getAlgoKeyword_4() { return cAlgoKeyword_4; }
		
		//script=[Script]
		public Assignment getScriptAssignment_5() { return cScriptAssignment_5; }
		
		//[Script]
		public CrossReference getScriptScriptCrossReference_5_0() { return cScriptScriptCrossReference_5_0; }
		
		//ID
		public RuleCall getScriptScriptIDTerminalRuleCall_5_0_1() { return cScriptScriptIDTerminalRuleCall_5_0_1; }
		
		//'entrees'
		public Keyword getEntreesKeyword_6() { return cEntreesKeyword_6; }
		
		//colonnesEntrees+=[Colonne]*
		public Assignment getColonnesEntreesAssignment_7() { return cColonnesEntreesAssignment_7; }
		
		//[Colonne]
		public CrossReference getColonnesEntreesColonneCrossReference_7_0() { return cColonnesEntreesColonneCrossReference_7_0; }
		
		//ID
		public RuleCall getColonnesEntreesColonneIDTerminalRuleCall_7_0_1() { return cColonnesEntreesColonneIDTerminalRuleCall_7_0_1; }
		
		//'type'
		public Keyword getTypeKeyword_8() { return cTypeKeyword_8; }
		
		//elementType=ColonneElementType
		public Assignment getElementTypeAssignment_9() { return cElementTypeAssignment_9; }
		
		//ColonneElementType
		public RuleCall getElementTypeColonneElementTypeEnumRuleCall_9_0() { return cElementTypeColonneElementTypeEnumRuleCall_9_0; }
		
		//('contrainte' contraintes=Contrainte)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'contrainte'
		public Keyword getContrainteKeyword_10_0() { return cContrainteKeyword_10_0; }
		
		//contraintes=Contrainte
		public Assignment getContraintesAssignment_10_1() { return cContraintesAssignment_10_1; }
		
		//Contrainte
		public RuleCall getContraintesContrainteParserRuleCall_10_1_0() { return cContraintesContrainteParserRuleCall_10_1_0; }
		
		//'nblignes'
		public Keyword getNblignesKeyword_11() { return cNblignesKeyword_11; }
		
		//nbLignes=INT
		public Assignment getNbLignesAssignment_12() { return cNbLignesAssignment_12; }
		
		//INT
		public RuleCall getNbLignesINTTerminalRuleCall_12_0() { return cNbLignesINTTerminalRuleCall_12_0; }
	}
	public class ContrainteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Contrainte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOuParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPredicatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Contrainte : Et | Ou | Predicat;
		@Override public ParserRule getRule() { return rule; }
		
		//Et | Ou | Predicat
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Et
		public RuleCall getEtParserRuleCall_0() { return cEtParserRuleCall_0; }
		
		//Ou
		public RuleCall getOuParserRuleCall_1() { return cOuParserRuleCall_1; }
		
		//Predicat
		public RuleCall getPredicatParserRuleCall_2() { return cPredicatParserRuleCall_2; }
	}
	public class EtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Et");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariablesContrainteCrossReference_2_0 = (CrossReference)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cVariablesContrainteIDTerminalRuleCall_2_0_1 = (RuleCall)cVariablesContrainteCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Et : 'Et' '(' variables+=[Contrainte]+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Et' '(' variables+=[Contrainte]+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Et'
		public Keyword getEtKeyword_0() { return cEtKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variables+=[Contrainte]+
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//[Contrainte]
		public CrossReference getVariablesContrainteCrossReference_2_0() { return cVariablesContrainteCrossReference_2_0; }
		
		//ID
		public RuleCall getVariablesContrainteIDTerminalRuleCall_2_0_1() { return cVariablesContrainteIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Ou");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOuKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariablesContrainteCrossReference_2_0 = (CrossReference)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cVariablesContrainteIDTerminalRuleCall_2_0_1 = (RuleCall)cVariablesContrainteCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ou : 'Ou' '(' variables+=[Contrainte]+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Ou' '(' variables+=[Contrainte]+ ')'
		public Group getGroup() { return cGroup; }
		
		//'Ou'
		public Keyword getOuKeyword_0() { return cOuKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variables+=[Contrainte]+
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//[Contrainte]
		public CrossReference getVariablesContrainteCrossReference_2_0() { return cVariablesContrainteCrossReference_2_0; }
		
		//ID
		public RuleCall getVariablesContrainteIDTerminalRuleCall_2_0_1() { return cVariablesContrainteIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PredicatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Predicat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPredicatValeurParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPredicatColonneParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Predicat : (PredicatValeur | PredicatColonne);
		@Override public ParserRule getRule() { return rule; }
		
		//(PredicatValeur | PredicatColonne)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PredicatValeur
		public RuleCall getPredicatValeurParserRuleCall_0() { return cPredicatValeurParserRuleCall_0; }
		
		//PredicatColonne
		public RuleCall getPredicatColonneParserRuleCall_1() { return cPredicatColonneParserRuleCall_1; }
	}
	public class PredicatColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.PredicatColonne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionEnumRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cCKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColonneAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColonneColonnesCrossReference_3_0 = (CrossReference)cColonneAssignment_3.eContents().get(0);
		private final RuleCall cColonneColonnesIDTerminalRuleCall_3_0_1 = (RuleCall)cColonneColonnesCrossReference_3_0.eContents().get(1);
		
		//PredicatColonne : 'condition' condition=Condition 'c' colonne=[Colonnes];
		@Override public ParserRule getRule() { return rule; }
		
		//'condition' condition=Condition 'c' colonne=[Colonnes]
		public Group getGroup() { return cGroup; }
		
		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionEnumRuleCall_1_0() { return cConditionConditionEnumRuleCall_1_0; }
		
		//'c'
		public Keyword getCKeyword_2() { return cCKeyword_2; }
		
		//colonne=[Colonnes]
		public Assignment getColonneAssignment_3() { return cColonneAssignment_3; }
		
		//[Colonnes]
		public CrossReference getColonneColonnesCrossReference_3_0() { return cColonneColonnesCrossReference_3_0; }
		
		//ID
		public RuleCall getColonneColonnesIDTerminalRuleCall_3_0_1() { return cColonneColonnesIDTerminalRuleCall_3_0_1; }
	}
	public class PredicatValeurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.PredicatValeur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionEnumRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cVKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValeurAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValeurFLOATTerminalRuleCall_3_0 = (RuleCall)cValeurAssignment_3.eContents().get(0);
		
		//PredicatValeur : 'condition' condition=Condition 'v' valeur=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'condition' condition=Condition 'v' valeur=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionEnumRuleCall_1_0() { return cConditionConditionEnumRuleCall_1_0; }
		
		//'v'
		public Keyword getVKeyword_2() { return cVKeyword_2; }
		
		//valeur=FLOAT
		public Assignment getValeurAssignment_3() { return cValeurAssignment_3; }
		
		//FLOAT
		public RuleCall getValeurFLOATTerminalRuleCall_3_0() { return cValeurFLOATTerminalRuleCall_3_0; }
	}
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cEntreesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEntreesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cEntreesColonneCrossReference_7_0 = (CrossReference)cEntreesAssignment_7.eContents().get(0);
		private final RuleCall cEntreesColonneIDTerminalRuleCall_7_0_1 = (RuleCall)cEntreesColonneCrossReference_7_0.eContents().get(1);
		private final Keyword cScriptElementsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cScriptElementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cScriptElementsScriptElementsParserRuleCall_10_0 = (RuleCall)cScriptElementsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Script:
		//    'Script' '{'
		//        'name' ':' name=ID
		//        'entrees' ':'
		//        entrees += [Colonne]*
		//        'scriptElements' ':'
		//        scriptElements+=ScriptElements*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Script' '{'
		//    'name' ':' name=ID
		//    'entrees' ':'
		//    entrees += [Colonne]*
		//    'scriptElements' ':'
		//    scriptElements+=ScriptElements*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Script'
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'entrees'
		public Keyword getEntreesKeyword_5() { return cEntreesKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//entrees += [Colonne]*
		public Assignment getEntreesAssignment_7() { return cEntreesAssignment_7; }
		
		//[Colonne]
		public CrossReference getEntreesColonneCrossReference_7_0() { return cEntreesColonneCrossReference_7_0; }
		
		//ID
		public RuleCall getEntreesColonneIDTerminalRuleCall_7_0_1() { return cEntreesColonneIDTerminalRuleCall_7_0_1; }
		
		//'scriptElements'
		public Keyword getScriptElementsKeyword_8() { return cScriptElementsKeyword_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//scriptElements+=ScriptElements*
		public Assignment getScriptElementsAssignment_10() { return cScriptElementsAssignment_10; }
		
		//ScriptElements
		public RuleCall getScriptElementsScriptElementsParserRuleCall_10_0() { return cScriptElementsScriptElementsParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ScriptElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.ScriptElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstanteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlocParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ScriptElements:
		//    Constante | Bloc | Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//Constante | Bloc | Argument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constante
		public RuleCall getConstanteParserRuleCall_0() { return cConstanteParserRuleCall_0; }
		
		//Bloc
		public RuleCall getBlocParserRuleCall_1() { return cBlocParserRuleCall_1; }
		
		//Argument
		public RuleCall getArgumentParserRuleCall_2() { return cArgumentParserRuleCall_2; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntreeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEntreeColonneCrossReference_1_0 = (CrossReference)cEntreeAssignment_1.eContents().get(0);
		private final RuleCall cEntreeColonneIDTerminalRuleCall_1_0_1 = (RuleCall)cEntreeColonneCrossReference_1_0.eContents().get(1);
		
		//Argument :
		//    'entree' entree = [Colonne]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entree' entree = [Colonne]
		public Group getGroup() { return cGroup; }
		
		//'entree'
		public Keyword getEntreeKeyword_0() { return cEntreeKeyword_0; }
		
		//entree = [Colonne]
		public Assignment getEntreeAssignment_1() { return cEntreeAssignment_1; }
		
		//[Colonne]
		public CrossReference getEntreeColonneCrossReference_1_0() { return cEntreeColonneCrossReference_1_0; }
		
		//ID
		public RuleCall getEntreeColonneIDTerminalRuleCall_1_0_1() { return cEntreeColonneIDTerminalRuleCall_1_0_1; }
	}
	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Constante");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstanteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValFLOATTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Constante:
		//    'Constante' 'val' val=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Constante' 'val' val=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'Constante'
		public Keyword getConstanteKeyword_0() { return cConstanteKeyword_0; }
		
		//'val'
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//val=FLOAT
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//FLOAT
		public RuleCall getValFLOATTerminalRuleCall_2_0() { return cValFLOATTerminalRuleCall_2_0; }
	}
	public class BlocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Bloc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBloc_BinaireParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBloc_UnaireParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBloc_FonctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Bloc: Bloc_Binaire | Bloc_Unaire | Bloc_Fonction;
		@Override public ParserRule getRule() { return rule; }
		
		//Bloc_Binaire | Bloc_Unaire | Bloc_Fonction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Bloc_Binaire
		public RuleCall getBloc_BinaireParserRuleCall_0() { return cBloc_BinaireParserRuleCall_0; }
		
		//Bloc_Unaire
		public RuleCall getBloc_UnaireParserRuleCall_1() { return cBloc_UnaireParserRuleCall_1; }
		
		//Bloc_Fonction
		public RuleCall getBloc_FonctionParserRuleCall_2() { return cBloc_FonctionParserRuleCall_2; }
	}
	public class Bloc_BinaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Bloc_Binaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationBinaireEnumRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		
		//Bloc_Binaire:
		//    'binaire' operation=binaire;
		@Override public ParserRule getRule() { return rule; }
		
		//'binaire' operation=binaire
		public Group getGroup() { return cGroup; }
		
		//'binaire'
		public Keyword getBinaireKeyword_0() { return cBinaireKeyword_0; }
		
		//operation=binaire
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//binaire
		public RuleCall getOperationBinaireEnumRuleCall_1_0() { return cOperationBinaireEnumRuleCall_1_0; }
	}
	public class Bloc_UnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Bloc_Unaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationUnaireEnumRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		
		//Bloc_Unaire:
		//    'unaire' operation=unaire;
		@Override public ParserRule getRule() { return rule; }
		
		//'unaire' operation=unaire
		public Group getGroup() { return cGroup; }
		
		//'unaire'
		public Keyword getUnaireKeyword_0() { return cUnaireKeyword_0; }
		
		//operation=unaire
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//unaire
		public RuleCall getOperationUnaireEnumRuleCall_1_0() { return cOperationUnaireEnumRuleCall_1_0; }
	}
	public class Bloc_FonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Bloc_Fonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFonctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationFonctionEnumRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		
		//Bloc_Fonction:
		//    'fonction' operation=fonction;
		@Override public ParserRule getRule() { return rule; }
		
		//'fonction' operation=fonction
		public Group getGroup() { return cGroup; }
		
		//'fonction'
		public Keyword getFonctionKeyword_0() { return cFonctionKeyword_0; }
		
		//operation=fonction
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//fonction
		public RuleCall getOperationFonctionEnumRuleCall_1_0() { return cOperationFonctionEnumRuleCall_1_0; }
	}
	
	public class ColonneElementTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.ColonneElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFLOATFKeyword_0_0 = (Keyword)cFLOATEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTIKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTRINGSKeyword_2_0 = (Keyword)cSTRINGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOOLBKeyword_3_0 = (Keyword)cBOOLEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ColonneElementType :
		//    FLOAT='f'
		//    |INT='i'
		//    |STRING='s'
		//    |BOOL='b';
		public EnumRule getRule() { return rule; }
		
		//FLOAT='f'
		//|INT='i'
		//|STRING='s'
		//|BOOL='b'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT='f'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_0() { return cFLOATEnumLiteralDeclaration_0; }
		
		//'f'
		public Keyword getFLOATFKeyword_0_0() { return cFLOATFKeyword_0_0; }
		
		//INT='i'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//'i'
		public Keyword getINTIKeyword_1_0() { return cINTIKeyword_1_0; }
		
		//STRING='s'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_2() { return cSTRINGEnumLiteralDeclaration_2; }
		
		//'s'
		public Keyword getSTRINGSKeyword_2_0() { return cSTRINGSKeyword_2_0; }
		
		//BOOL='b'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_3() { return cBOOLEnumLiteralDeclaration_3; }
		
		//'b'
		public Keyword getBOOLBKeyword_3_0() { return cBOOLBKeyword_3_0; }
	}
	public class ConditionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInferieurOuEgalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInferieurOuEgalLessThanSignEqualsSignKeyword_0_0 = (Keyword)cInferieurOuEgalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInferieurStrictEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInferieurStrictLessThanSignKeyword_1_0 = (Keyword)cInferieurStrictEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEgalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEgalEqualsSignKeyword_2_0 = (Keyword)cEgalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSuperieurStrictEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSuperieurStrictGreaterThanSignKeyword_3_0 = (Keyword)cSuperieurStrictEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSuperieurOuEgalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSuperieurOuEgalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cSuperieurOuEgalEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Condition :
		//    InferieurOuEgal='<='
		//    |InferieurStrict='<'
		//    |Egal="="
		//    |SuperieurStrict='>'
		//    |SuperieurOuEgal='>=';
		public EnumRule getRule() { return rule; }
		
		//InferieurOuEgal='<='
		//|InferieurStrict='<'
		//|Egal="="
		//|SuperieurStrict='>'
		//|SuperieurOuEgal='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InferieurOuEgal='<='
		public EnumLiteralDeclaration getInferieurOuEgalEnumLiteralDeclaration_0() { return cInferieurOuEgalEnumLiteralDeclaration_0; }
		
		//'<='
		public Keyword getInferieurOuEgalLessThanSignEqualsSignKeyword_0_0() { return cInferieurOuEgalLessThanSignEqualsSignKeyword_0_0; }
		
		//InferieurStrict='<'
		public EnumLiteralDeclaration getInferieurStrictEnumLiteralDeclaration_1() { return cInferieurStrictEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getInferieurStrictLessThanSignKeyword_1_0() { return cInferieurStrictLessThanSignKeyword_1_0; }
		
		//Egal="="
		public EnumLiteralDeclaration getEgalEnumLiteralDeclaration_2() { return cEgalEnumLiteralDeclaration_2; }
		
		//"="
		public Keyword getEgalEqualsSignKeyword_2_0() { return cEgalEqualsSignKeyword_2_0; }
		
		//SuperieurStrict='>'
		public EnumLiteralDeclaration getSuperieurStrictEnumLiteralDeclaration_3() { return cSuperieurStrictEnumLiteralDeclaration_3; }
		
		//'>'
		public Keyword getSuperieurStrictGreaterThanSignKeyword_3_0() { return cSuperieurStrictGreaterThanSignKeyword_3_0; }
		
		//SuperieurOuEgal='>='
		public EnumLiteralDeclaration getSuperieurOuEgalEnumLiteralDeclaration_4() { return cSuperieurOuEgalEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getSuperieurOuEgalGreaterThanSignEqualsSignKeyword_4_0() { return cSuperieurOuEgalGreaterThanSignEqualsSignKeyword_4_0; }
	}
	public class BinaireElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.binaire");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdditionSumKeyword_0_0 = (Keyword)cAdditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSoustractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSoustractionSubKeyword_1_0 = (Keyword)cSoustractionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDivisionEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDivisionDivKeyword_2_0 = (Keyword)cDivisionEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMultiplicationMultKeyword_3_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum binaire :
		//    Addition='sum'
		//    |Soustraction='sub'
		//    |Division="div"
		//    |Multiplication='mult';
		public EnumRule getRule() { return rule; }
		
		//Addition='sum'
		//|Soustraction='sub'
		//|Division="div"
		//|Multiplication='mult'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Addition='sum'
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_0() { return cAdditionEnumLiteralDeclaration_0; }
		
		//'sum'
		public Keyword getAdditionSumKeyword_0_0() { return cAdditionSumKeyword_0_0; }
		
		//Soustraction='sub'
		public EnumLiteralDeclaration getSoustractionEnumLiteralDeclaration_1() { return cSoustractionEnumLiteralDeclaration_1; }
		
		//'sub'
		public Keyword getSoustractionSubKeyword_1_0() { return cSoustractionSubKeyword_1_0; }
		
		//Division="div"
		public EnumLiteralDeclaration getDivisionEnumLiteralDeclaration_2() { return cDivisionEnumLiteralDeclaration_2; }
		
		//"div"
		public Keyword getDivisionDivKeyword_2_0() { return cDivisionDivKeyword_2_0; }
		
		//Multiplication='mult'
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_3() { return cMultiplicationEnumLiteralDeclaration_3; }
		
		//'mult'
		public Keyword getMultiplicationMultKeyword_3_0() { return cMultiplicationMultKeyword_3_0; }
	}
	public class UnaireElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.unaire");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOpposeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOpposeOpposeKeyword_0_0 = (Keyword)cOpposeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInverseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInverseInverseKeyword_1_0 = (Keyword)cInverseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum unaire :
		//    Oppose='oppose'
		//    |Inverse='inverse';
		public EnumRule getRule() { return rule; }
		
		//Oppose='oppose'
		//|Inverse='inverse'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Oppose='oppose'
		public EnumLiteralDeclaration getOpposeEnumLiteralDeclaration_0() { return cOpposeEnumLiteralDeclaration_0; }
		
		//'oppose'
		public Keyword getOpposeOpposeKeyword_0_0() { return cOpposeOpposeKeyword_0_0; }
		
		//Inverse='inverse'
		public EnumLiteralDeclaration getInverseEnumLiteralDeclaration_1() { return cInverseEnumLiteralDeclaration_1; }
		
		//'inverse'
		public Keyword getInverseInverseKeyword_1_0() { return cInverseInverseKeyword_1_0; }
	}
	public class FonctionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.fonction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinMinKeyword_0_0 = (Keyword)cMinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMaxMaxKeyword_1_0 = (Keyword)cMaxEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSinSinKeyword_2_0 = (Keyword)cSinEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCosEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCosCosKeyword_3_0 = (Keyword)cCosEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cExpEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cExpExpKeyword_4_0 = (Keyword)cExpEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRacineEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRacineSqrtKeyword_5_0 = (Keyword)cRacineEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum fonction :
		//    Min='min'
		//    |Max='max'
		//    |Sin="sin"
		//    |Cos='cos'
		//    |Exp='exp'
		//    |Racine="sqrt";
		public EnumRule getRule() { return rule; }
		
		//Min='min'
		//|Max='max'
		//|Sin="sin"
		//|Cos='cos'
		//|Exp='exp'
		//|Racine="sqrt"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Min='min'
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_0() { return cMinEnumLiteralDeclaration_0; }
		
		//'min'
		public Keyword getMinMinKeyword_0_0() { return cMinMinKeyword_0_0; }
		
		//Max='max'
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_1() { return cMaxEnumLiteralDeclaration_1; }
		
		//'max'
		public Keyword getMaxMaxKeyword_1_0() { return cMaxMaxKeyword_1_0; }
		
		//Sin="sin"
		public EnumLiteralDeclaration getSinEnumLiteralDeclaration_2() { return cSinEnumLiteralDeclaration_2; }
		
		//"sin"
		public Keyword getSinSinKeyword_2_0() { return cSinSinKeyword_2_0; }
		
		//Cos='cos'
		public EnumLiteralDeclaration getCosEnumLiteralDeclaration_3() { return cCosEnumLiteralDeclaration_3; }
		
		//'cos'
		public Keyword getCosCosKeyword_3_0() { return cCosCosKeyword_3_0; }
		
		//Exp='exp'
		public EnumLiteralDeclaration getExpEnumLiteralDeclaration_4() { return cExpEnumLiteralDeclaration_4; }
		
		//'exp'
		public Keyword getExpExpKeyword_4_0() { return cExpExpKeyword_4_0; }
		
		//Racine="sqrt"
		public EnumLiteralDeclaration getRacineEnumLiteralDeclaration_5() { return cRacineEnumLiteralDeclaration_5; }
		
		//"sqrt"
		public Keyword getRacineSqrtKeyword_5_0() { return cRacineSqrtKeyword_5_0; }
	}
	
	private final TableElements pTable;
	private final ColonnesElements pColonnes;
	private final ColonneElements pColonne;
	private final ColonneProvientElements pColonneProvient;
	private final ColonneDeriveeElements pColonneDerivee;
	private final ColonneElementTypeElements eColonneElementType;
	private final ContrainteElements pContrainte;
	private final EtElements pEt;
	private final OuElements pOu;
	private final PredicatElements pPredicat;
	private final PredicatColonneElements pPredicatColonne;
	private final PredicatValeurElements pPredicatValeur;
	private final TerminalRule tFLOAT;
	private final ConditionElements eCondition;
	private final ScriptElements pScript;
	private final ScriptElementsElements pScriptElements;
	private final ArgumentElements pArgument;
	private final ConstanteElements pConstante;
	private final BlocElements pBloc;
	private final Bloc_BinaireElements pBloc_Binaire;
	private final Bloc_UnaireElements pBloc_Unaire;
	private final Bloc_FonctionElements pBloc_Fonction;
	private final BinaireElements eBinaire;
	private final UnaireElements eUnaire;
	private final FonctionElements eFonction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Table_xtextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTable = new TableElements();
		this.pColonnes = new ColonnesElements();
		this.pColonne = new ColonneElements();
		this.pColonneProvient = new ColonneProvientElements();
		this.pColonneDerivee = new ColonneDeriveeElements();
		this.eColonneElementType = new ColonneElementTypeElements();
		this.pContrainte = new ContrainteElements();
		this.pEt = new EtElements();
		this.pOu = new OuElements();
		this.pPredicat = new PredicatElements();
		this.pPredicatColonne = new PredicatColonneElements();
		this.pPredicatValeur = new PredicatValeurElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.Table_xtext.FLOAT");
		this.eCondition = new ConditionElements();
		this.pScript = new ScriptElements();
		this.pScriptElements = new ScriptElementsElements();
		this.pArgument = new ArgumentElements();
		this.pConstante = new ConstanteElements();
		this.pBloc = new BlocElements();
		this.pBloc_Binaire = new Bloc_BinaireElements();
		this.pBloc_Unaire = new Bloc_UnaireElements();
		this.pBloc_Fonction = new Bloc_FonctionElements();
		this.eBinaire = new BinaireElements();
		this.eUnaire = new UnaireElements();
		this.eFonction = new FonctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.Table_xtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Table : 'table' name=ID '{'
	//    colonnes+=Colonnes*
	//    'speciale'colonneID=[Colonne]
	//    scripts += Script*
	//    '}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Colonnes : (Colonne | ColonneProvient | ColonneDerivee);
	public ColonnesElements getColonnesAccess() {
		return pColonnes;
	}
	
	public ParserRule getColonnesRule() {
		return getColonnesAccess().getRule();
	}
	
	//Colonne : 'c' name=ID
	//    'indice' indice = INT
	//    'type' elementType=ColonneElementType
	//    ('contrainte' contraintes=Contrainte)?
	//    'nblignes' nbLignes=INT;
	public ColonneElements getColonneAccess() {
		return pColonne;
	}
	
	public ParserRule getColonneRule() {
		return getColonneAccess().getRule();
	}
	
	//ColonneProvient : 'cp' name=ID
	//    'indice' indice = INT
	//    'tableOrigine' tableOrigin=Table
	//    'refColonne' refColonne=ID
	//    'type' elementType=ColonneElementType
	//    ('contrainte' contraintes=Contrainte)?
	//    'nblignes' nbLignes=INT;
	public ColonneProvientElements getColonneProvientAccess() {
		return pColonneProvient;
	}
	
	public ParserRule getColonneProvientRule() {
		return getColonneProvientAccess().getRule();
	}
	
	//ColonneDerivee : 'cd' name=ID
	//    'indice' indice = INT
	//    'algo' script=[Script]
	//    'entrees' colonnesEntrees+=[Colonne]*
	//    'type' elementType=ColonneElementType
	//    ('contrainte' contraintes=Contrainte)?
	//    'nblignes' nbLignes=INT;
	public ColonneDeriveeElements getColonneDeriveeAccess() {
		return pColonneDerivee;
	}
	
	public ParserRule getColonneDeriveeRule() {
		return getColonneDeriveeAccess().getRule();
	}
	
	//enum ColonneElementType :
	//    FLOAT='f'
	//    |INT='i'
	//    |STRING='s'
	//    |BOOL='b';
	public ColonneElementTypeElements getColonneElementTypeAccess() {
		return eColonneElementType;
	}
	
	public EnumRule getColonneElementTypeRule() {
		return getColonneElementTypeAccess().getRule();
	}
	
	//Contrainte : Et | Ou | Predicat;
	public ContrainteElements getContrainteAccess() {
		return pContrainte;
	}
	
	public ParserRule getContrainteRule() {
		return getContrainteAccess().getRule();
	}
	
	//Et : 'Et' '(' variables+=[Contrainte]+ ')';
	public EtElements getEtAccess() {
		return pEt;
	}
	
	public ParserRule getEtRule() {
		return getEtAccess().getRule();
	}
	
	//Ou : 'Ou' '(' variables+=[Contrainte]+ ')';
	public OuElements getOuAccess() {
		return pOu;
	}
	
	public ParserRule getOuRule() {
		return getOuAccess().getRule();
	}
	
	//Predicat : (PredicatValeur | PredicatColonne);
	public PredicatElements getPredicatAccess() {
		return pPredicat;
	}
	
	public ParserRule getPredicatRule() {
		return getPredicatAccess().getRule();
	}
	
	//PredicatColonne : 'condition' condition=Condition 'c' colonne=[Colonnes];
	public PredicatColonneElements getPredicatColonneAccess() {
		return pPredicatColonne;
	}
	
	public ParserRule getPredicatColonneRule() {
		return getPredicatColonneAccess().getRule();
	}
	
	//PredicatValeur : 'condition' condition=Condition 'v' valeur=FLOAT;
	public PredicatValeurElements getPredicatValeurAccess() {
		return pPredicatValeur;
	}
	
	public ParserRule getPredicatValeurRule() {
		return getPredicatValeurAccess().getRule();
	}
	
	//terminal FLOAT: INT '.' INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//enum Condition :
	//    InferieurOuEgal='<='
	//    |InferieurStrict='<'
	//    |Egal="="
	//    |SuperieurStrict='>'
	//    |SuperieurOuEgal='>=';
	public ConditionElements getConditionAccess() {
		return eCondition;
	}
	
	public EnumRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Script:
	//    'Script' '{'
	//        'name' ':' name=ID
	//        'entrees' ':'
	//        entrees += [Colonne]*
	//        'scriptElements' ':'
	//        scriptElements+=ScriptElements*
	//    '}';
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//ScriptElements:
	//    Constante | Bloc | Argument;
	public ScriptElementsElements getScriptElementsAccess() {
		return pScriptElements;
	}
	
	public ParserRule getScriptElementsRule() {
		return getScriptElementsAccess().getRule();
	}
	
	//Argument :
	//    'entree' entree = [Colonne]
	//;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Constante:
	//    'Constante' 'val' val=FLOAT;
	public ConstanteElements getConstanteAccess() {
		return pConstante;
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}
	
	//Bloc: Bloc_Binaire | Bloc_Unaire | Bloc_Fonction;
	public BlocElements getBlocAccess() {
		return pBloc;
	}
	
	public ParserRule getBlocRule() {
		return getBlocAccess().getRule();
	}
	
	//Bloc_Binaire:
	//    'binaire' operation=binaire;
	public Bloc_BinaireElements getBloc_BinaireAccess() {
		return pBloc_Binaire;
	}
	
	public ParserRule getBloc_BinaireRule() {
		return getBloc_BinaireAccess().getRule();
	}
	
	//Bloc_Unaire:
	//    'unaire' operation=unaire;
	public Bloc_UnaireElements getBloc_UnaireAccess() {
		return pBloc_Unaire;
	}
	
	public ParserRule getBloc_UnaireRule() {
		return getBloc_UnaireAccess().getRule();
	}
	
	//Bloc_Fonction:
	//    'fonction' operation=fonction;
	public Bloc_FonctionElements getBloc_FonctionAccess() {
		return pBloc_Fonction;
	}
	
	public ParserRule getBloc_FonctionRule() {
		return getBloc_FonctionAccess().getRule();
	}
	
	//enum binaire :
	//    Addition='sum'
	//    |Soustraction='sub'
	//    |Division="div"
	//    |Multiplication='mult';
	public BinaireElements getBinaireAccess() {
		return eBinaire;
	}
	
	public EnumRule getBinaireRule() {
		return getBinaireAccess().getRule();
	}
	
	//enum unaire :
	//    Oppose='oppose'
	//    |Inverse='inverse';
	public UnaireElements getUnaireAccess() {
		return eUnaire;
	}
	
	public EnumRule getUnaireRule() {
		return getUnaireAccess().getRule();
	}
	
	//enum fonction :
	//    Min='min'
	//    |Max='max'
	//    |Sin="sin"
	//    |Cos='cos'
	//    |Exp='exp'
	//    |Racine="sqrt";
	public FonctionElements getFonctionAccess() {
		return eFonction;
	}
	
	public EnumRule getFonctionRule() {
		return getFonctionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
