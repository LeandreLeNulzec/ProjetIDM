/*
 * generated by Xtext 2.32.0
 */
package fr.n7.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.ide.contentassist.antlr.internal.InternalTable_xtextParser;
import fr.n7.services.Table_xtextGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class Table_xtextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Table_xtextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Table_xtextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColonnesAccess().getAlternatives(), "rule__Colonnes__Alternatives");
			builder.put(grammarAccess.getContrainteAccess().getAlternatives(), "rule__Contrainte__Alternatives");
			builder.put(grammarAccess.getPredicatAccess().getAlternatives(), "rule__Predicat__Alternatives");
			builder.put(grammarAccess.getScriptElementsAccess().getAlternatives(), "rule__ScriptElements__Alternatives");
			builder.put(grammarAccess.getBlocAccess().getAlternatives(), "rule__Bloc__Alternatives");
			builder.put(grammarAccess.getColonneElementTypeAccess().getAlternatives(), "rule__ColonneElementType__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getBinaireAccess().getAlternatives(), "rule__Binaire__Alternatives");
			builder.put(grammarAccess.getUnaireAccess().getAlternatives(), "rule__Unaire__Alternatives");
			builder.put(grammarAccess.getFonctionAccess().getAlternatives(), "rule__Fonction__Alternatives");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getColonneAccess().getGroup(), "rule__Colonne__Group__0");
			builder.put(grammarAccess.getColonneAccess().getGroup_6(), "rule__Colonne__Group_6__0");
			builder.put(grammarAccess.getColonneProvientAccess().getGroup(), "rule__ColonneProvient__Group__0");
			builder.put(grammarAccess.getColonneProvientAccess().getGroup_10(), "rule__ColonneProvient__Group_10__0");
			builder.put(grammarAccess.getColonneDeriveeAccess().getGroup(), "rule__ColonneDerivee__Group__0");
			builder.put(grammarAccess.getColonneDeriveeAccess().getGroup_10(), "rule__ColonneDerivee__Group_10__0");
			builder.put(grammarAccess.getEtAccess().getGroup(), "rule__Et__Group__0");
			builder.put(grammarAccess.getOuAccess().getGroup(), "rule__Ou__Group__0");
			builder.put(grammarAccess.getPredicatColonneAccess().getGroup(), "rule__PredicatColonne__Group__0");
			builder.put(grammarAccess.getPredicatValeurAccess().getGroup(), "rule__PredicatValeur__Group__0");
			builder.put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getConstanteAccess().getGroup(), "rule__Constante__Group__0");
			builder.put(grammarAccess.getBloc_BinaireAccess().getGroup(), "rule__Bloc_Binaire__Group__0");
			builder.put(grammarAccess.getBloc_UnaireAccess().getGroup(), "rule__Bloc_Unaire__Group__0");
			builder.put(grammarAccess.getBloc_FonctionAccess().getGroup(), "rule__Bloc_Fonction__Group__0");
			builder.put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
			builder.put(grammarAccess.getTableAccess().getColonnesAssignment_3(), "rule__Table__ColonnesAssignment_3");
			builder.put(grammarAccess.getTableAccess().getColonneIDAssignment_5(), "rule__Table__ColonneIDAssignment_5");
			builder.put(grammarAccess.getTableAccess().getScriptsAssignment_6(), "rule__Table__ScriptsAssignment_6");
			builder.put(grammarAccess.getColonneAccess().getNameAssignment_1(), "rule__Colonne__NameAssignment_1");
			builder.put(grammarAccess.getColonneAccess().getIndiceAssignment_3(), "rule__Colonne__IndiceAssignment_3");
			builder.put(grammarAccess.getColonneAccess().getElementTypeAssignment_5(), "rule__Colonne__ElementTypeAssignment_5");
			builder.put(grammarAccess.getColonneAccess().getContraintesAssignment_6_1(), "rule__Colonne__ContraintesAssignment_6_1");
			builder.put(grammarAccess.getColonneAccess().getNbLignesAssignment_8(), "rule__Colonne__NbLignesAssignment_8");
			builder.put(grammarAccess.getColonneProvientAccess().getNameAssignment_1(), "rule__ColonneProvient__NameAssignment_1");
			builder.put(grammarAccess.getColonneProvientAccess().getIndiceAssignment_3(), "rule__ColonneProvient__IndiceAssignment_3");
			builder.put(grammarAccess.getColonneProvientAccess().getTableOriginAssignment_5(), "rule__ColonneProvient__TableOriginAssignment_5");
			builder.put(grammarAccess.getColonneProvientAccess().getRefColonneAssignment_7(), "rule__ColonneProvient__RefColonneAssignment_7");
			builder.put(grammarAccess.getColonneProvientAccess().getElementTypeAssignment_9(), "rule__ColonneProvient__ElementTypeAssignment_9");
			builder.put(grammarAccess.getColonneProvientAccess().getContraintesAssignment_10_1(), "rule__ColonneProvient__ContraintesAssignment_10_1");
			builder.put(grammarAccess.getColonneProvientAccess().getNbLignesAssignment_12(), "rule__ColonneProvient__NbLignesAssignment_12");
			builder.put(grammarAccess.getColonneDeriveeAccess().getNameAssignment_1(), "rule__ColonneDerivee__NameAssignment_1");
			builder.put(grammarAccess.getColonneDeriveeAccess().getIndiceAssignment_3(), "rule__ColonneDerivee__IndiceAssignment_3");
			builder.put(grammarAccess.getColonneDeriveeAccess().getScriptAssignment_5(), "rule__ColonneDerivee__ScriptAssignment_5");
			builder.put(grammarAccess.getColonneDeriveeAccess().getColonnesEntreesAssignment_7(), "rule__ColonneDerivee__ColonnesEntreesAssignment_7");
			builder.put(grammarAccess.getColonneDeriveeAccess().getElementTypeAssignment_9(), "rule__ColonneDerivee__ElementTypeAssignment_9");
			builder.put(grammarAccess.getColonneDeriveeAccess().getContraintesAssignment_10_1(), "rule__ColonneDerivee__ContraintesAssignment_10_1");
			builder.put(grammarAccess.getColonneDeriveeAccess().getNbLignesAssignment_12(), "rule__ColonneDerivee__NbLignesAssignment_12");
			builder.put(grammarAccess.getEtAccess().getVariablesAssignment_2(), "rule__Et__VariablesAssignment_2");
			builder.put(grammarAccess.getOuAccess().getVariablesAssignment_2(), "rule__Ou__VariablesAssignment_2");
			builder.put(grammarAccess.getPredicatColonneAccess().getConditionAssignment_1(), "rule__PredicatColonne__ConditionAssignment_1");
			builder.put(grammarAccess.getPredicatColonneAccess().getColonneAssignment_3(), "rule__PredicatColonne__ColonneAssignment_3");
			builder.put(grammarAccess.getPredicatValeurAccess().getConditionAssignment_1(), "rule__PredicatValeur__ConditionAssignment_1");
			builder.put(grammarAccess.getPredicatValeurAccess().getValeurAssignment_3(), "rule__PredicatValeur__ValeurAssignment_3");
			builder.put(grammarAccess.getScriptAccess().getNameAssignment_4(), "rule__Script__NameAssignment_4");
			builder.put(grammarAccess.getScriptAccess().getEntreesAssignment_7(), "rule__Script__EntreesAssignment_7");
			builder.put(grammarAccess.getScriptAccess().getScriptElementsAssignment_10(), "rule__Script__ScriptElementsAssignment_10");
			builder.put(grammarAccess.getArgumentAccess().getEntreeAssignment_1(), "rule__Argument__EntreeAssignment_1");
			builder.put(grammarAccess.getConstanteAccess().getValAssignment_2(), "rule__Constante__ValAssignment_2");
			builder.put(grammarAccess.getBloc_BinaireAccess().getOperationAssignment_1(), "rule__Bloc_Binaire__OperationAssignment_1");
			builder.put(grammarAccess.getBloc_UnaireAccess().getOperationAssignment_1(), "rule__Bloc_Unaire__OperationAssignment_1");
			builder.put(grammarAccess.getBloc_FonctionAccess().getOperationAssignment_1(), "rule__Bloc_Fonction__OperationAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Table_xtextGrammarAccess grammarAccess;

	@Override
	protected InternalTable_xtextParser createParser() {
		InternalTable_xtextParser result = new InternalTable_xtextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Table_xtextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Table_xtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
